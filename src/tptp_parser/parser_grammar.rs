#![allow(unused_imports)]
#![allow(unused_variables)]
use tptp_parser::ast::*;
extern crate lalrpop_util as __lalrpop_util;
use self::__lalrpop_util::ParseError as __ParseError;

mod __parse__TPTP_file {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_TPTP_file<
        'input,
    >(
        input: &'input str,
    ) -> Result<Vec<TptpInput>, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____TPTP__file(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____fof__annotated(FofAnnotated),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        assoc__connective(String),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        binary__connective(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fof__and__formula(Formula),
        fof__annotated(FofAnnotated),
        fof__binary__assoc(Formula),
        fof__binary__formula(Formula),
        fof__binary__nonassoc(Formula),
        fof__formula(Formula),
        fof__logic__formula(Formula),
        fof__or__formula(Formula),
        fof__quantified__formula(Formula),
        fof__unary__formula(Formula),
        fof__unitary__formula(Formula),
        fof__variable__list(Vec<String>),
        fol__infix__unary(Formula),
        fol__quantifier(String),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        unary__connective(String),
        upper__word(String),
        variable(String),
    }

    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym0));
            }
            None => {
                let __nt = super::__action112(input, &__lookbehind, &__lookahead);
                __result = (__lookbehind, __lookahead, __Nonterminal::TPTP__file(__nt));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::TPTP__file(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::TPTP__input(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::TPTP__input_2b(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state3(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::annotated__formula(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::cnf__annotated(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::fof__annotated(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::include(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Vec<TptpInput>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action0(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____TPTP__file(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<TptpInput>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action110(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<TptpInput>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action113(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__file(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::TPTP__input(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::annotated__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::cnf__annotated(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__annotated(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::include(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<AnnotatedFormula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action8(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<CnfAnnotated>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action10(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::annotated__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<FofAnnotated>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action11(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::annotated__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Include>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action9(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<TptpInput>>,
        __sym1: &mut Option<TptpInput>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action111(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::file__name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action89(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action90(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action91(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state26(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action92(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action98(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action105(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action102(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::lower__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state27(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state30(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__selection(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action97(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::file__name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__role(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__role(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__role(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action115(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::cnf__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::number(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::real(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__and__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__binary__assoc(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state81(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__binary__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__binary__nonassoc(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state83(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state84(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
                }
                __Nonterminal::fof__logic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state85(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__or__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state86(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::number(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::real(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action114(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action87(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state98(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action81(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action72(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state99(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action69(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action73(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action56(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action74(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action78(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state100(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action80(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action58(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action77(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action60(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__formula(__nt)));
            }
            Some((_, (1, _), _)) |
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state101(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action76(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action93(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__defined__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state102(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action71(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action94(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action75(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action55(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action57(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action95(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action96(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state107(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state103(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state104(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::infix__inequality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action82(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::variable(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action66(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state108(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state110(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action99(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action100(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action103(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::real(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action104(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::rational(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action101(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::upper__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state79<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state80<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state111(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action22(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__assoc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state81<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action19(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state82<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__logic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state83<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state84<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state112(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state85<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state86<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action21(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__assoc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state87<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action27(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state88<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state89<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state116(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state118(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__logic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::binary__connective(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state90<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action35(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state91<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state92<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state93<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (14, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action44(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__quantifier(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state94<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__and__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__binary__assoc(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state81(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__binary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__binary__nonassoc(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state83(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__logic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::fof__or__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state86(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state95<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (14, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__quantifier(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state96<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action54(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::unary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state97<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state98<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action86(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__selection(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state99<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state100<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state128(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state129(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state130(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state131(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state101<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state132(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state102<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state133(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state129(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state130(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state131(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state103<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state129(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state130(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state134(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state104<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action62(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__pred(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state105<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state129(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state130(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state135(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state106<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action64(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__inequality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state107<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__equality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state108<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state101(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state109<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action41(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state110<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state107(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state103(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state104(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state111<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state112<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state138(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state113<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state139(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state114<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state140(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state115<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state141(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state116<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state117<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state118<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action49(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state119<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action47(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state120<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state142(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state121<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state122<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state123<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::fof__variable__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state143(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state144(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state124<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state125<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state145(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state126<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action88(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state127<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __nt = super::__action12(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state128<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state129<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state130<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state131<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action83(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state132<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action39(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state133<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state148(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state134<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action61(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state135<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__infix__unary(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state136<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state137<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action26(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__and__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state138<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __nt = super::__action13(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state139<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action24(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__or__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state140<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action20(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__nonassoc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state141<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action25(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__and__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state142<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action23(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__or__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state143<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state149(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state144<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state150(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__variable__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state145<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action30(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state146<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state147<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state151(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state129(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state130(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state131(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state148<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action70(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state149<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state152(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state150<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::fof__variable__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state153(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state144(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state151<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action84(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state152<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state154(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::number(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::real(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state153<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__variable__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state154<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action31(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__quantified__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__TPTP_file::parse_TPTP_file;

mod __parse__cnf_annotated {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_cnf_annotated<
        'input,
    >(
        input: &'input str,
    ) -> Result<CnfAnnotated, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____cnf__annotated(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____fof__annotated(FofAnnotated),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        assoc__connective(String),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        binary__connective(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fof__and__formula(Formula),
        fof__annotated(FofAnnotated),
        fof__binary__assoc(Formula),
        fof__binary__formula(Formula),
        fof__binary__nonassoc(Formula),
        fof__formula(Formula),
        fof__logic__formula(Formula),
        fof__or__formula(Formula),
        fof__quantified__formula(Formula),
        fof__unary__formula(Formula),
        fof__unitary__formula(Formula),
        fof__variable__list(Vec<String>),
        fol__infix__unary(Formula),
        fol__quantifier(String),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        unary__connective(String),
        upper__word(String),
        variable(String),
    }

    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::cnf__annotated(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<CnfAnnotated>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action1(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____cnf__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action89(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action90(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action91(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action92(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action98(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action105(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action102(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::lower__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__role(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__role(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::cnf__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::number(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::real(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action81(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action72(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state53(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action69(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action73(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action56(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action74(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action78(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action80(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action58(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action77(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action60(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__formula(__nt)));
            }
            Some((_, (1, _), _)) |
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action76(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action93(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__defined__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action71(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action94(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action75(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action55(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action57(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action95(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action96(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::infix__inequality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action82(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::variable(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action66(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action99(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action100(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action103(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::real(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action104(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::rational(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action101(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::upper__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state72(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action62(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__pred(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state73(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action64(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__inequality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__equality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action41(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __nt = super::__action12(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action83(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action39(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action61(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__infix__unary(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action70(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action84(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__cnf_annotated::parse_cnf_annotated;

mod __parse__distinct_object {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_distinct_object<
        'input,
    >(
        input: &'input str,
    ) -> Result<String, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____distinct__object(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____fof__annotated(FofAnnotated),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        assoc__connective(String),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        binary__connective(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fof__and__formula(Formula),
        fof__annotated(FofAnnotated),
        fof__binary__assoc(Formula),
        fof__binary__formula(Formula),
        fof__binary__nonassoc(Formula),
        fof__formula(Formula),
        fof__logic__formula(Formula),
        fof__or__formula(Formula),
        fof__quantified__formula(Formula),
        fof__unary__formula(Formula),
        fof__unitary__formula(Formula),
        fof__variable__list(Vec<String>),
        fol__infix__unary(Formula),
        fol__quantifier(String),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        unary__connective(String),
        upper__word(String),
        variable(String),
    }

    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::distinct__object(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action5(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action99(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__distinct_object::parse_distinct_object;

mod __parse__dollar_word {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_dollar_word<
        'input,
    >(
        input: &'input str,
    ) -> Result<String, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____dollar__word(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____fof__annotated(FofAnnotated),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        assoc__connective(String),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        binary__connective(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fof__and__formula(Formula),
        fof__annotated(FofAnnotated),
        fof__binary__assoc(Formula),
        fof__binary__formula(Formula),
        fof__binary__nonassoc(Formula),
        fof__formula(Formula),
        fof__logic__formula(Formula),
        fof__or__formula(Formula),
        fof__quantified__formula(Formula),
        fof__unary__formula(Formula),
        fof__unitary__formula(Formula),
        fof__variable__list(Vec<String>),
        fol__infix__unary(Formula),
        fol__quantifier(String),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        unary__connective(String),
        upper__word(String),
        variable(String),
    }

    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::dollar__word(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action6(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action100(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__dollar_word::parse_dollar_word;

mod __parse__fof_annotated {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_fof_annotated<
        'input,
    >(
        input: &'input str,
    ) -> Result<FofAnnotated, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____fof__annotated(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____fof__annotated(FofAnnotated),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        assoc__connective(String),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        binary__connective(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fof__and__formula(Formula),
        fof__annotated(FofAnnotated),
        fof__binary__assoc(Formula),
        fof__binary__formula(Formula),
        fof__binary__nonassoc(Formula),
        fof__formula(Formula),
        fof__logic__formula(Formula),
        fof__or__formula(Formula),
        fof__quantified__formula(Formula),
        fof__unary__formula(Formula),
        fof__unitary__formula(Formula),
        fof__variable__list(Vec<String>),
        fol__infix__unary(Formula),
        fol__quantifier(String),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        unary__connective(String),
        upper__word(String),
        variable(String),
    }

    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::fof__annotated(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<FofAnnotated>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action2(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____fof__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action89(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action90(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action91(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action92(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action98(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action105(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action102(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::lower__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__role(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__role(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__and__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__binary__assoc(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__binary__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__binary__nonassoc(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
                }
                __Nonterminal::fof__logic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__or__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::number(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::real(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action81(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action72(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action69(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action73(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action56(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action74(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action78(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action80(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action58(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action77(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action60(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__formula(__nt)));
            }
            Some((_, (1, _), _)) |
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action76(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action93(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__defined__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action22(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__assoc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action19(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__logic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action21(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__assoc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action27(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (22, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__logic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::binary__connective(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action35(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action71(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action94(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action75(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action55(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action57(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action95(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action96(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::infix__inequality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state81(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state84(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action82(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::variable(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action66(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (14, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action44(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__quantifier(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__and__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__binary__assoc(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__binary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__binary__nonassoc(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__logic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state85(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::fof__or__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (14, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__quantifier(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action54(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::unary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action99(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action100(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action103(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::real(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action104(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::rational(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action101(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::upper__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state86(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state91(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state93(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state94(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action49(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action47(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state95(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::binary__connective(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::fof__variable__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state96(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state97(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state98(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state79<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state99(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state80<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action62(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__pred(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state81<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state100(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state82<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action64(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__inequality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state83<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, _), _)) |
            Some((_, (24, _), _)) |
            Some((_, (25, _), _)) |
            Some((_, (26, _), _)) |
            Some((_, (27, _), _)) |
            Some((_, (28, _), _)) |
            Some((_, (29, _), _)) |
            Some((_, (30, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__equality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state84<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state85<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state101(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state86<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state102(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state87<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state88<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state89<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state103(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action83(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state90<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action26(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__and__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state91<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __nt = super::__action13(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state92<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action24(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__or__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state93<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action20(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__binary__nonassoc(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state94<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action25(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__and__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state95<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action23(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__or__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state96<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state104(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state97<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state105(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__variable__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state98<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state99<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action61(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state100<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__infix__unary(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state101<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action30(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__unitary__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state102<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state103<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state107(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state104<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state105<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::fof__variable__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state97(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state106<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action70(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state107<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action84(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state108<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (23, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (24, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (27, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (28, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (29, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fof__quantified__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fof__unary__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fof__unitary__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state110(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::fol__quantifier(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::number(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::real(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::unary__connective(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state109<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__variable__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state110<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (21, _), _)) |
            Some((_, (22, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action31(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fof__quantified__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__fof_annotated::parse_fof_annotated;

mod __parse__include {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_include<
        'input,
    >(
        input: &'input str,
    ) -> Result<Include, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____include(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____fof__annotated(FofAnnotated),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        assoc__connective(String),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        binary__connective(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fof__and__formula(Formula),
        fof__annotated(FofAnnotated),
        fof__binary__assoc(Formula),
        fof__binary__formula(Formula),
        fof__binary__nonassoc(Formula),
        fof__formula(Formula),
        fof__logic__formula(Formula),
        fof__or__formula(Formula),
        fof__quantified__formula(Formula),
        fof__unary__formula(Formula),
        fof__unitary__formula(Formula),
        fof__variable__list(Vec<String>),
        fol__infix__unary(Formula),
        fol__quantifier(String),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        unary__connective(String),
        upper__word(String),
        variable(String),
    }

    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::include(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Include>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::file__name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__selection(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action97(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::file__name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action98(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action115(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action114(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action89(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action90(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action91(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action87(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action92(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action105(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action102(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::lower__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (26, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (30, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action86(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__selection(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (15, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action88(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__include::parse_include;

mod __parse__single_quoted {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_single_quoted<
        'input,
    >(
        input: &'input str,
    ) -> Result<String, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____single__quoted(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____fof__annotated(FofAnnotated),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        assoc__connective(String),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        binary__connective(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fof__and__formula(Formula),
        fof__annotated(FofAnnotated),
        fof__binary__assoc(Formula),
        fof__binary__formula(Formula),
        fof__binary__nonassoc(Formula),
        fof__formula(Formula),
        fof__logic__formula(Formula),
        fof__or__formula(Formula),
        fof__quantified__formula(Formula),
        fof__unary__formula(Formula),
        fof__unitary__formula(Formula),
        fof__variable__list(Vec<String>),
        fol__infix__unary(Formula),
        fol__quantifier(String),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        unary__connective(String),
        upper__word(String),
        variable(String),
    }

    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (25, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::single__quoted(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action4(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action98(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__single_quoted::parse_single_quoted;
mod __intern_token {
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub struct __Matcher<'input> {
        text: &'input str,
        consumed: usize,
    }

    fn __tokenize(text: &str) -> Option<(usize, usize)> {
        let mut __chars = text.char_indices();
        let mut __current_match: Option<(usize, usize)> = None;
        let mut __current_state: usize = 0;
        loop {
            match __current_state {
                0 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '!' => {
                            __current_match = Some((0, __index + 1));
                            __current_state = 1;
                            continue;
                        }
                        '\"' => {
                            __current_state = 2;
                            continue;
                        }
                        '$' => {
                            __current_state = 3;
                            continue;
                        }
                        '&' => {
                            __current_match = Some((2, __index + 1));
                            __current_state = 4;
                            continue;
                        }
                        '\'' => {
                            __current_state = 5;
                            continue;
                        }
                        '(' => {
                            __current_match = Some((3, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        ')' => {
                            __current_match = Some((4, __index + 1));
                            __current_state = 7;
                            continue;
                        }
                        '+' => {
                            __current_state = 8;
                            continue;
                        }
                        ',' => {
                            __current_match = Some((5, __index + 1));
                            __current_state = 9;
                            continue;
                        }
                        '-' => {
                            __current_state = 8;
                            continue;
                        }
                        '.' => {
                            __current_match = Some((6, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        ':' => {
                            __current_match = Some((7, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '<' => {
                            __current_state = 13;
                            continue;
                        }
                        '=' => {
                            __current_match = Some((11, __index + 1));
                            __current_state = 14;
                            continue;
                        }
                        '?' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '[' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 17;
                            continue;
                        }
                        ']' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 18;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 20;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 22;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '|' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 23;
                            continue;
                        }
                        '~' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                1 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '=' => {
                            __current_match = Some((1, __index + 1));
                            __current_state = 26;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                2 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            return __current_match;
                        }
                        '\\' => {
                            __current_state = 27;
                            continue;
                        }
                        _ => {
                            __current_state = 28;
                            continue;
                        }
                    }
                }
                3 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'a' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        's' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        't' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                4 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                5 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            return __current_match;
                        }
                        '\\' => {
                            __current_state = 30;
                            continue;
                        }
                        _ => {
                            __current_state = 31;
                            continue;
                        }
                    }
                }
                6 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                7 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                8 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                9 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                10 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                11 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '.' => {
                            __current_state = 32;
                            continue;
                        }
                        '/' => {
                            __current_state = 33;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((26, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                12 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                13 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '=' => {
                            __current_match = Some((8, __index + 1));
                            __current_state = 34;
                            continue;
                        }
                        '~' => {
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                14 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '>' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 36;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                15 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                16 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        's' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        't' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((29, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                17 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                18 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                19 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                20 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                21 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                22 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 39;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                23 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                24 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '&' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 40;
                            continue;
                        }
                        '|' => {
                            __current_match = Some((22, __index + 1));
                            __current_state = 41;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                25 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                26 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                27 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((23, __index + 1));
                            __current_state = 42;
                            continue;
                        }
                        '\\' => {
                            __current_state = 43;
                            continue;
                        }
                        _ => {
                            __current_state = 28;
                            continue;
                        }
                    }
                }
                28 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((23, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '\\' => {
                            __current_state = 43;
                            continue;
                        }
                        _ => {
                            __current_state = 28;
                            continue;
                        }
                    }
                }
                29 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        's' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        't' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((24, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                30 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((25, __index + 1));
                            __current_state = 45;
                            continue;
                        }
                        '\\' => {
                            __current_state = 46;
                            continue;
                        }
                        _ => {
                            __current_state = 31;
                            continue;
                        }
                    }
                }
                31 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((25, __index + 1));
                            __current_state = 47;
                            continue;
                        }
                        '\\' => {
                            __current_state = 46;
                            continue;
                        }
                        _ => {
                            __current_state = 31;
                            continue;
                        }
                    }
                }
                32 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                33 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                34 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '>' => {
                            __current_match = Some((9, __index + 1));
                            __current_state = 50;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                35 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '>' => {
                            __current_match = Some((10, __index + 1));
                            __current_state = 51;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                36 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                37 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 52;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                38 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 53;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                39 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 54;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                40 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                41 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                42 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((23, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '\\' => {
                            __current_state = 43;
                            continue;
                        }
                        _ => {
                            __current_state = 28;
                            continue;
                        }
                    }
                }
                43 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((23, __index + 1));
                            __current_state = 42;
                            continue;
                        }
                        '\\' => {
                            __current_state = 43;
                            continue;
                        }
                        _ => {
                            __current_state = 28;
                            continue;
                        }
                    }
                }
                44 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                45 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((25, __index + 1));
                            __current_state = 47;
                            continue;
                        }
                        '\\' => {
                            __current_state = 46;
                            continue;
                        }
                        _ => {
                            __current_state = 31;
                            continue;
                        }
                    }
                }
                46 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((25, __index + 1));
                            __current_state = 45;
                            continue;
                        }
                        '\\' => {
                            __current_state = 46;
                            continue;
                        }
                        _ => {
                            __current_state = 31;
                            continue;
                        }
                    }
                }
                47 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                48 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        'E' => {
                            __current_state = 55;
                            continue;
                        }
                        'e' => {
                            __current_state = 55;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                49 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((28, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                50 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                51 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                52 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                53 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                54 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 56;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                55 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '+' => {
                            __current_state = 57;
                            continue;
                        }
                        '-' => {
                            __current_state = 57;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                56 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 59;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                57 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                58 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((27, __index + 1));
                            __current_state = 58;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                59 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 60;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                60 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 61;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                61 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        's' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        't' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((30, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                _ => { panic!("invalid state {}", __current_state); }
            }
        }
    }

    impl<'input> __Matcher<'input> {
        pub fn new(s: &'input str) -> __Matcher<'input> {
            __Matcher { text: s, consumed: 0 }
        }
    }

    impl<'input> Iterator for __Matcher<'input> {
        type Item = Result<(usize, (usize, &'input str), usize), __ParseError<usize,(usize, &'input str),()>>;

        fn next(&mut self) -> Option<Self::Item> {
            let __text = self.text.trim_left();
            let __whitespace = self.text.len() - __text.len();
            let __start_offset = self.consumed + __whitespace;
            if __text.is_empty() {
                self.text = __text;
                self.consumed = __start_offset;
                None
            } else {
                match __tokenize(__text) {
                    Some((__index, __length)) => {
                        let __result = &__text[..__length];
                        let __remaining = &__text[__length..];
                        let __end_offset = __start_offset + __length;
                        self.text = __remaining;
                        self.consumed = __end_offset;
                        Some(Ok((__start_offset, (__index, __result), __end_offset)))
                    }
                    None => {
                        Some(Err(__ParseError::InvalidToken { location: __start_offset }))
                    }
                }
            }
        }
    }
}

pub fn __action0<
    'input,
>(
    input: &'input str,
    __0: Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    (__0)
}

pub fn __action1<
    'input,
>(
    input: &'input str,
    __0: CnfAnnotated,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> CnfAnnotated
{
    (__0)
}

pub fn __action2<
    'input,
>(
    input: &'input str,
    __0: FofAnnotated,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> FofAnnotated
{
    (__0)
}

pub fn __action3<
    'input,
>(
    input: &'input str,
    __0: Include,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    (__0)
}

pub fn __action4<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action5<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action6<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action7<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    (__0)
}

pub fn __action8<
    'input,
>(
    input: &'input str,
    f: AnnotatedFormula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> TptpInput
{
    TptpInput::AnnForm(f)
}

pub fn __action9<
    'input,
>(
    input: &'input str,
    i: Include,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> TptpInput
{
    TptpInput::Incl(i)
}

pub fn __action10<
    'input,
>(
    input: &'input str,
    c: CnfAnnotated,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> AnnotatedFormula
{
    AnnotatedFormula::Cnf(c)
}

pub fn __action11<
    'input,
>(
    input: &'input str,
    f: FofAnnotated,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> AnnotatedFormula
{
    AnnotatedFormula::Fof(f)
}

pub fn __action12<
    'input,
>(
    input: &'input str,
    _: &'input str,
    _: &'input str,
    n: String,
    _: &'input str,
    fr: String,
    _: &'input str,
    f: Formula,
    _: &'input str,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> CnfAnnotated
{
    (n, fr, f)
}

pub fn __action13<
    'input,
>(
    input: &'input str,
    _: &'input str,
    _: &'input str,
    n: String,
    _: &'input str,
    fr: String,
    _: &'input str,
    f: Formula,
    _: &'input str,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> FofAnnotated
{
    (n, fr, f)
}

pub fn __action14<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action15<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action16<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action17<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action18<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action19<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action20<
    'input,
>(
    input: &'input str,
    f1: Formula,
    s: String,
    f2: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    match &*s {
                                                                                      "<=>" => Formula::Equivalent(Box::new(f1), Box::new(f2)),
                                                                                      "=>" => Formula::Implies(Box::new(f1), Box::new(f2)),
                                                                                      "<=" => Formula::Equivalent(Box::new(f2), Box::new(f1)),
                                                                                      "<~>" => Formula::Not(Box::new(Formula::Equivalent(Box::new(f1), Box::new(f2)))),
                                                                                      "~|" => Formula::Not(Box::new(Formula::Or(Box::new(f1), Box::new(f2)))),
                                                                                      "~&" => Formula::Not(Box::new(Formula::Or(Box::new(f1), Box::new(f2)))),
                                                                                      _ => panic!("Should not be possible")
                                                                                  }
}

pub fn __action21<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action22<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action23<
    'input,
>(
    input: &'input str,
    f1: Formula,
    _: &'input str,
    f2: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Or(Box::new(f1), Box::new(f2))
}

pub fn __action24<
    'input,
>(
    input: &'input str,
    f1: Formula,
    _: &'input str,
    f2: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Or(Box::new(f1), Box::new(f2))
}

pub fn __action25<
    'input,
>(
    input: &'input str,
    f1: Formula,
    _: &'input str,
    f2: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::And(Box::new(f1), Box::new(f2))
}

pub fn __action26<
    'input,
>(
    input: &'input str,
    f1: Formula,
    _: &'input str,
    f2: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::And(Box::new(f1), Box::new(f2))
}

pub fn __action27<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action28<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action29<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action30<
    'input,
>(
    input: &'input str,
    _: &'input str,
    f: Formula,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    f
}

pub fn __action31<
    'input,
>(
    input: &'input str,
    s: String,
    _: &'input str,
    l: Vec<String>,
    _: &'input str,
    _: &'input str,
    f: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    l.into_iter()
                                                                                        .fold(f, |acc, x| match &*s {
                                                                                                              "!" => Formula::Forall(x, Box::new(acc)),
                                                                                                              "?" => Formula::Exists(x, Box::new(acc)),
                                                                                                              _ => panic!("Should not be possible")
                                                                                                          })
}

pub fn __action32<
    'input,
>(
    input: &'input str,
    v: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    vec!(v)
}

pub fn __action33<
    'input,
>(
    input: &'input str,
    v: String,
    _: &'input str,
    vs: Vec<String>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    { let mut vs = vs; vs.insert(0, v); vs }
}

pub fn __action34<
    'input,
>(
    input: &'input str,
    _: String,
    f: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Not(Box::new(f))
}

pub fn __action35<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action36<
    'input,
>(
    input: &'input str,
    _: &'input str,
    d: Formula,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    d
}

pub fn __action37<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action38<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action39<
    'input,
>(
    input: &'input str,
    d: Formula,
    _: &'input str,
    l: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Or(Box::new(d), Box::new(l))
}

pub fn __action40<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action41<
    'input,
>(
    input: &'input str,
    _: &'input str,
    f: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Not(Box::new(f))
}

pub fn __action42<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action43<
    'input,
>(
    input: &'input str,
    t1: Term,
    _: String,
    t2: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Not(Box::new(Formula::Predicate("=".to_string(), vec!(t1, t2))))
}

pub fn __action44<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action45<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action46<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action47<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action48<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action49<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action50<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action51<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action52<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action53<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action54<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action55<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action56<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action57<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    { match t {
                             Term::Variable(s) => Formula::Predicate(s, Vec::new()),
                             Term::Function(s, args) => Formula::Predicate(s, args)
                         }
                       }
}

pub fn __action58<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action59<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action60<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    { match t {
                             Term::Variable(s) => Formula::Predicate(s, Vec::new()),
                             Term::Function(s, args) => Formula::Predicate(s, args)
                         }
                       }
}

pub fn __action61<
    'input,
>(
    input: &'input str,
    t1: Term,
    s: String,
    t2: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Predicate(s, vec!(t1, t2))
}

pub fn __action62<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action63<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action64<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action65<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action66<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Variable(s)
}

pub fn __action67<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action68<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action69<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action70<
    'input,
>(
    input: &'input str,
    s: String,
    _: &'input str,
    arg: Vec<Term>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, arg)
}

pub fn __action71<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action72<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action73<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action74<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action75<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action76<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action77<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action78<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action79<
    'input,
>(
    input: &'input str,
    s: String,
    _: &'input str,
    arg: Vec<Term>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, arg)
}

pub fn __action80<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action81<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action82<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action83<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<Term>
{
    vec!(t)
}

pub fn __action84<
    'input,
>(
    input: &'input str,
    t: Term,
    _: &'input str,
    ts: Vec<Term>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<Term>
{
    { let mut ts = ts; ts.insert(0, t); ts }
}

pub fn __action85<
    'input,
>(
    input: &'input str,
    _: &'input str,
    _: &'input str,
    file_n: String,
    fs: ::std::option::Option<Vec<String>>,
    _: &'input str,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    (file_n, fs)
}

pub fn __action86<
    'input,
>(
    input: &'input str,
    _: &'input str,
    _: &'input str,
    nl: Vec<String>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    nl
}

pub fn __action87<
    'input,
>(
    input: &'input str,
    n: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    vec!(n)
}

pub fn __action88<
    'input,
>(
    input: &'input str,
    n: String,
    _: &'input str,
    ns: Vec<String>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    { let mut ns = ns; ns.insert(0, n); ns }
}

pub fn __action89<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action90<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action91<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action92<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action93<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action94<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action95<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action96<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action97<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action98<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s[1..(s.len() - 1)].to_string()
}

pub fn __action99<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s[1..(s.len() - 1)].to_string()
}

pub fn __action100<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action101<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action102<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action103<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action104<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action105<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action106<
    'input,
>(
    input: &'input str,
    __0: Vec<String>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::option::Option<Vec<String>>
{
    Some(__0)
}

pub fn __action107<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::option::Option<Vec<String>>
{
    None
}

pub fn __action108<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    vec![]
}

pub fn __action109<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    v
}

pub fn __action110<
    'input,
>(
    input: &'input str,
    __0: TptpInput,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    vec![__0]
}

pub fn __action111<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<TptpInput>,
    e: TptpInput,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action112<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    let __temp0 = __action108(
        input,
        __lookbehind,
        __lookahead,
    );
    __action7(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action113<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    let __temp0 = __action109(
        input,
        __0,
        __lookbehind,
        __lookahead,
    );
    __action7(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action114<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __2: String,
    __3: Vec<String>,
    __4: &'input str,
    __5: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    let __temp0 = __action106(
        input,
        __3,
        __lookbehind,
        __lookahead,
    );
    __action85(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action115<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __2: String,
    __3: &'input str,
    __4: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    let __temp0 = __action107(
        input,
        __lookbehind,
        __lookahead,
    );
    __action85(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __lookbehind,
        __lookahead,
    )
}

pub trait __ToTriple<'input, > {
    type Error;
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),Self::Error>;
}

impl<'input, > __ToTriple<'input, > for (usize, (usize, &'input str), usize) {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, (usize, &'input str), usize),()> {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        value
    }
}
