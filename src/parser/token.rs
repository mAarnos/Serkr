/*
    Serkr - An automated theorem prover. Copyright (C) 2015 Mikko Aarnos.

    Serkr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Serkr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Serkr. If not, see <http://www.gnu.org/licenses/>.
*/

/// An enum with all different types of tokens our tokens can be.
#[derive(Debug, Eq, PartialEq, Copy, Clone)]
pub enum TokenType {
    LeftParenthesis,
    RightParenthesis,
    Comma,
    Period,
    Name,
    Not,
    And,
    Or,
    Implies,
    Equivalent,
    Forall,
    Exists,
    Invalid // Only for convenience during parsing when we run out of tokens
}

/// A single token generated by the tokenizer. Contains the type and the name of the token.
#[derive(Debug, Eq, PartialEq, Clone)]
pub struct Token {
    token_type: TokenType,
    token_name: String
}

impl Token {
    /// Creates a new token.
    pub fn new(ttype: TokenType, tname: String) -> Token {
        Token { token_type: ttype, token_name: tname }
    }
    
    /// Get the type of the token.
    pub fn get_type(&self) -> TokenType {
        self.token_type
    }
    
    /// Get the name of the token.
    pub fn get_name(&self) -> String {
        self.token_name.clone()
    }
}

#[cfg(test)]
mod test {
    use super::Token;
    use super::TokenType;

    #[test]
    fn new() {
        let tok = Token::new(TokenType::Name, "x_1".to_string());
        
        assert_eq!(tok.token_type, TokenType::Name);
        assert_eq!(tok.token_name, "x_1");
    }
    
    #[test]
    fn accessor_functions() {
        let tok = Token::new(TokenType::Implies, "implies".to_string());
        
        assert_eq!(tok.get_type(), TokenType::Implies);
        assert_eq!(tok.get_name(), "implies");
    }
}