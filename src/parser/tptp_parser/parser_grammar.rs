#![allow(unused_imports)]
#![allow(unused_variables)]
use parser::tptp_parser::ast::*;
extern crate lalrpop_util as __lalrpop_util;
use self::__lalrpop_util::ParseError as __ParseError;

mod __parse__TPTP_file {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use parser::tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_TPTP_file<
        'input,
    >(
        input: &'input str,
    ) -> Result<Vec<TptpInput>, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____TPTP__file(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fol__infix__unary(Formula),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        upper__word(String),
        variable(String),
    }

    // State 0
    //   TPTP_file = (*) [EOF]
    //   TPTP_file = (*) TPTP_input+ [EOF]
    //   TPTP_input = (*) annotated_formula [EOF]
    //   TPTP_input = (*) annotated_formula ["cnf"]
    //   TPTP_input = (*) annotated_formula ["include"]
    //   TPTP_input = (*) include [EOF]
    //   TPTP_input = (*) include ["cnf"]
    //   TPTP_input = (*) include ["include"]
    //   TPTP_input+ = (*) TPTP_input [EOF]
    //   TPTP_input+ = (*) TPTP_input ["cnf"]
    //   TPTP_input+ = (*) TPTP_input ["include"]
    //   TPTP_input+ = (*) TPTP_input+ TPTP_input [EOF]
    //   TPTP_input+ = (*) TPTP_input+ TPTP_input ["cnf"]
    //   TPTP_input+ = (*) TPTP_input+ TPTP_input ["include"]
    //   __TPTP_file = (*) TPTP_file [EOF]
    //   annotated_formula = (*) cnf_annotated [EOF]
    //   annotated_formula = (*) cnf_annotated ["cnf"]
    //   annotated_formula = (*) cnf_annotated ["include"]
    //   cnf_annotated = (*) "cnf" "(" name "," formula_role "," cnf_formula ")" "." [EOF]
    //   cnf_annotated = (*) "cnf" "(" name "," formula_role "," cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = (*) "cnf" "(" name "," formula_role "," cnf_formula ")" "." ["include"]
    //   include = (*) "include" "(" file_name formula_selection ")" "." [EOF]
    //   include = (*) "include" "(" file_name formula_selection ")" "." ["cnf"]
    //   include = (*) "include" "(" file_name formula_selection ")" "." ["include"]
    //   include = (*) "include" "(" file_name ")" "." [EOF]
    //   include = (*) "include" "(" file_name ")" "." ["cnf"]
    //   include = (*) "include" "(" file_name ")" "." ["include"]
    //
    //   EOF -> Reduce(TPTP_file =  => ActionFn(77);)
    //   "cnf" -> Shift(S7)
    //   "include" -> Shift(S8)
    //
    //   TPTP_file -> S1
    //   TPTP_input -> S2
    //   TPTP_input+ -> S3
    //   annotated_formula -> S4
    //   cnf_annotated -> S5
    //   include -> S6
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state7(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym0));
            }
            None => {
                let __nt = super::__action77(input, &__lookbehind, &__lookahead);
                __result = (__lookbehind, __lookahead, __Nonterminal::TPTP__file(__nt));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::TPTP__file(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::TPTP__input(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::TPTP__input_2b(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state3(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::annotated__formula(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::cnf__annotated(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::include(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __TPTP_file = TPTP_file (*) [EOF]
    //
    //   EOF -> Reduce(__TPTP_file = TPTP_file => ActionFn(0);)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Vec<TptpInput>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action0(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____TPTP__file(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   TPTP_input+ = TPTP_input (*) [EOF]
    //   TPTP_input+ = TPTP_input (*) ["cnf"]
    //   TPTP_input+ = TPTP_input (*) ["include"]
    //
    //   EOF -> Reduce(TPTP_input+ = TPTP_input => ActionFn(75);)
    //   "cnf" -> Reduce(TPTP_input+ = TPTP_input => ActionFn(75);)
    //   "include" -> Reduce(TPTP_input+ = TPTP_input => ActionFn(75);)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<TptpInput>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action75(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 3
    //   TPTP_file = TPTP_input+ (*) [EOF]
    //   TPTP_input = (*) annotated_formula [EOF]
    //   TPTP_input = (*) annotated_formula ["cnf"]
    //   TPTP_input = (*) annotated_formula ["include"]
    //   TPTP_input = (*) include [EOF]
    //   TPTP_input = (*) include ["cnf"]
    //   TPTP_input = (*) include ["include"]
    //   TPTP_input+ = TPTP_input+ (*) TPTP_input [EOF]
    //   TPTP_input+ = TPTP_input+ (*) TPTP_input ["cnf"]
    //   TPTP_input+ = TPTP_input+ (*) TPTP_input ["include"]
    //   annotated_formula = (*) cnf_annotated [EOF]
    //   annotated_formula = (*) cnf_annotated ["cnf"]
    //   annotated_formula = (*) cnf_annotated ["include"]
    //   cnf_annotated = (*) "cnf" "(" name "," formula_role "," cnf_formula ")" "." [EOF]
    //   cnf_annotated = (*) "cnf" "(" name "," formula_role "," cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = (*) "cnf" "(" name "," formula_role "," cnf_formula ")" "." ["include"]
    //   include = (*) "include" "(" file_name formula_selection ")" "." [EOF]
    //   include = (*) "include" "(" file_name formula_selection ")" "." ["cnf"]
    //   include = (*) "include" "(" file_name formula_selection ")" "." ["include"]
    //   include = (*) "include" "(" file_name ")" "." [EOF]
    //   include = (*) "include" "(" file_name ")" "." ["cnf"]
    //   include = (*) "include" "(" file_name ")" "." ["include"]
    //
    //   EOF -> Reduce(TPTP_file = TPTP_input+ => ActionFn(78);)
    //   "cnf" -> Shift(S7)
    //   "include" -> Shift(S8)
    //
    //   TPTP_input -> S9
    //   annotated_formula -> S4
    //   cnf_annotated -> S5
    //   include -> S6
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<TptpInput>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state7(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym1));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action78(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__file(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::TPTP__input(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::annotated__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::cnf__annotated(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::include(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 4
    //   TPTP_input = annotated_formula (*) [EOF]
    //   TPTP_input = annotated_formula (*) ["cnf"]
    //   TPTP_input = annotated_formula (*) ["include"]
    //
    //   EOF -> Reduce(TPTP_input = annotated_formula => ActionFn(7);)
    //   "cnf" -> Reduce(TPTP_input = annotated_formula => ActionFn(7);)
    //   "include" -> Reduce(TPTP_input = annotated_formula => ActionFn(7);)
    //
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<AnnotatedFormula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action7(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 5
    //   annotated_formula = cnf_annotated (*) [EOF]
    //   annotated_formula = cnf_annotated (*) ["cnf"]
    //   annotated_formula = cnf_annotated (*) ["include"]
    //
    //   EOF -> Reduce(annotated_formula = cnf_annotated => ActionFn(9);)
    //   "cnf" -> Reduce(annotated_formula = cnf_annotated => ActionFn(9);)
    //   "include" -> Reduce(annotated_formula = cnf_annotated => ActionFn(9);)
    //
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<CnfAnnotated>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action9(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::annotated__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 6
    //   TPTP_input = include (*) [EOF]
    //   TPTP_input = include (*) ["cnf"]
    //   TPTP_input = include (*) ["include"]
    //
    //   EOF -> Reduce(TPTP_input = include => ActionFn(8);)
    //   "cnf" -> Reduce(TPTP_input = include => ActionFn(8);)
    //   "include" -> Reduce(TPTP_input = include => ActionFn(8);)
    //
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Include>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action8(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 7
    //   cnf_annotated = "cnf" (*) "(" name "," formula_role "," cnf_formula ")" "." [EOF]
    //   cnf_annotated = "cnf" (*) "(" name "," formula_role "," cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = "cnf" (*) "(" name "," formula_role "," cnf_formula ")" "." ["include"]
    //
    //   "(" -> Shift(S10)
    //
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 8
    //   include = "include" (*) "(" file_name formula_selection ")" "." [EOF]
    //   include = "include" (*) "(" file_name formula_selection ")" "." ["cnf"]
    //   include = "include" (*) "(" file_name formula_selection ")" "." ["include"]
    //   include = "include" (*) "(" file_name ")" "." [EOF]
    //   include = "include" (*) "(" file_name ")" "." ["cnf"]
    //   include = "include" (*) "(" file_name ")" "." ["include"]
    //
    //   "(" -> Shift(S11)
    //
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 9
    //   TPTP_input+ = TPTP_input+ TPTP_input (*) [EOF]
    //   TPTP_input+ = TPTP_input+ TPTP_input (*) ["cnf"]
    //   TPTP_input+ = TPTP_input+ TPTP_input (*) ["include"]
    //
    //   EOF -> Reduce(TPTP_input+ = TPTP_input+, TPTP_input => ActionFn(76);)
    //   "cnf" -> Reduce(TPTP_input+ = TPTP_input+, TPTP_input => ActionFn(76);)
    //   "include" -> Reduce(TPTP_input+ = TPTP_input+, TPTP_input => ActionFn(76);)
    //
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<TptpInput>>,
        __sym1: &mut Option<TptpInput>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action76(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::TPTP__input_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 10
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted [","]
    //   cnf_annotated = "cnf" "(" (*) name "," formula_role "," cnf_formula ")" "." [EOF]
    //   cnf_annotated = "cnf" "(" (*) name "," formula_role "," cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = "cnf" "(" (*) name "," formula_role "," cnf_formula ")" "." ["include"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   name = (*) atomic_word [","]
    //   name = (*) integer [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_word -> S12
    //   integer -> S13
    //   lower_word -> S14
    //   name -> S15
    //   single_quoted -> S16
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 11
    //   file_name = (*) single_quoted [")"]
    //   file_name = (*) single_quoted [","]
    //   include = "include" "(" (*) file_name formula_selection ")" "." [EOF]
    //   include = "include" "(" (*) file_name formula_selection ")" "." ["cnf"]
    //   include = "include" "(" (*) file_name formula_selection ")" "." ["include"]
    //   include = "include" "(" (*) file_name ")" "." [EOF]
    //   include = "include" "(" (*) file_name ")" "." ["cnf"]
    //   include = "include" "(" (*) file_name ")" "." ["include"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //
    //   file_name -> S20
    //   single_quoted -> S21
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::file__name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 12
    //   name = atomic_word (*) [","]
    //   name = atomic_word (*) [","]
    //   name = atomic_word (*) ["]"]
    //
    //   "," -> Reduce(name = atomic_word => ActionFn(54);)
    //   "]" -> Reduce(name = atomic_word => ActionFn(54);)
    //
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action54(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 13
    //   name = integer (*) [","]
    //   name = integer (*) [","]
    //   name = integer (*) ["]"]
    //
    //   "," -> Reduce(name = integer => ActionFn(55);)
    //   "]" -> Reduce(name = integer => ActionFn(55);)
    //
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action55(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 14
    //   atomic_word = lower_word (*) [","]
    //   atomic_word = lower_word (*) [","]
    //   atomic_word = lower_word (*) ["]"]
    //   atomic_word = lower_word (*) ["!="]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) ["="]
    //   atomic_word = lower_word (*) ["|"]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) ["="]
    //   atomic_word = lower_word (*) ["|"]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) [","]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) ["|"]
    //
    //   "!=" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "(" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   ")" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "," -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "=" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "]" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "|" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action56(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 15
    //   cnf_annotated = "cnf" "(" name (*) "," formula_role "," cnf_formula ")" "." [EOF]
    //   cnf_annotated = "cnf" "(" name (*) "," formula_role "," cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = "cnf" "(" name (*) "," formula_role "," cnf_formula ")" "." ["include"]
    //
    //   "," -> Shift(S22)
    //
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 16
    //   atomic_word = single_quoted (*) [","]
    //   atomic_word = single_quoted (*) [","]
    //   atomic_word = single_quoted (*) ["]"]
    //   atomic_word = single_quoted (*) ["!="]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) ["="]
    //   atomic_word = single_quoted (*) ["|"]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) ["="]
    //   atomic_word = single_quoted (*) ["|"]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) [","]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) ["|"]
    //
    //   "!=" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "(" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   ")" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "," -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "=" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "]" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "|" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action57(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 17
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["]"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["!="]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["="]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["|"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["="]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["|"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["|"]
    //
    //   "!=" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "(" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   ")" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "," -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "=" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "]" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "|" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 18
    //   integer = r#"[+-]?[0-9]+"# (*) [","]
    //   integer = r#"[+-]?[0-9]+"# (*) [","]
    //   integer = r#"[+-]?[0-9]+"# (*) ["]"]
    //   integer = r#"[+-]?[0-9]+"# (*) ["!="]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) ["="]
    //   integer = r#"[+-]?[0-9]+"# (*) ["|"]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) ["="]
    //   integer = r#"[+-]?[0-9]+"# (*) ["|"]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) [","]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) ["|"]
    //
    //   "!=" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   ")" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "," -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "=" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "]" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "|" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action70(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 19
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [","]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [","]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["]"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["!="]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [","]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "!=" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "(" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   ")" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "," -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "=" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "]" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "|" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::lower__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 20
    //   formula_selection = (*) "," "[" name_list "]" [")"]
    //   include = "include" "(" file_name (*) formula_selection ")" "." [EOF]
    //   include = "include" "(" file_name (*) formula_selection ")" "." ["cnf"]
    //   include = "include" "(" file_name (*) formula_selection ")" "." ["include"]
    //   include = "include" "(" file_name (*) ")" "." [EOF]
    //   include = "include" "(" file_name (*) ")" "." ["cnf"]
    //   include = "include" "(" file_name (*) ")" "." ["include"]
    //
    //   ")" -> Shift(S24)
    //   "," -> Shift(S25)
    //
    //   formula_selection -> S23
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state24(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state25(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__selection(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 21
    //   file_name = single_quoted (*) [")"]
    //   file_name = single_quoted (*) [","]
    //
    //   ")" -> Reduce(file_name = single_quoted => ActionFn(62);)
    //   "," -> Reduce(file_name = single_quoted => ActionFn(62);)
    //
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action62(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::file__name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 22
    //   cnf_annotated = "cnf" "(" name "," (*) formula_role "," cnf_formula ")" "." [EOF]
    //   cnf_annotated = "cnf" "(" name "," (*) formula_role "," cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = "cnf" "(" name "," (*) formula_role "," cnf_formula ")" "." ["include"]
    //   formula_role = (*) lower_word [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   formula_role -> S26
    //   lower_word -> S27
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__role(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 23
    //   include = "include" "(" file_name formula_selection (*) ")" "." [EOF]
    //   include = "include" "(" file_name formula_selection (*) ")" "." ["cnf"]
    //   include = "include" "(" file_name formula_selection (*) ")" "." ["include"]
    //
    //   ")" -> Shift(S28)
    //
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state28(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 24
    //   include = "include" "(" file_name ")" (*) "." [EOF]
    //   include = "include" "(" file_name ")" (*) "." ["cnf"]
    //   include = "include" "(" file_name ")" (*) "." ["include"]
    //
    //   "." -> Shift(S29)
    //
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 25
    //   formula_selection = "," (*) "[" name_list "]" [")"]
    //
    //   "[" -> Shift(S30)
    //
    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state30(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 26
    //   cnf_annotated = "cnf" "(" name "," formula_role (*) "," cnf_formula ")" "." [EOF]
    //   cnf_annotated = "cnf" "(" name "," formula_role (*) "," cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = "cnf" "(" name "," formula_role (*) "," cnf_formula ")" "." ["include"]
    //
    //   "," -> Shift(S31)
    //
    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state31(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 27
    //   formula_role = lower_word (*) [","]
    //
    //   "," -> Reduce(formula_role = lower_word => ActionFn(11);)
    //
    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action11(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__role(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 28
    //   include = "include" "(" file_name formula_selection ")" (*) "." [EOF]
    //   include = "include" "(" file_name formula_selection ")" (*) "." ["cnf"]
    //   include = "include" "(" file_name formula_selection ")" (*) "." ["include"]
    //
    //   "." -> Shift(S32)
    //
    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state32(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 29
    //   include = "include" "(" file_name ")" "." (*) [EOF]
    //   include = "include" "(" file_name ")" "." (*) ["cnf"]
    //   include = "include" "(" file_name ")" "." (*) ["include"]
    //
    //   EOF -> Reduce(include = "include", "(", file_name, ")", "." => ActionFn(80);)
    //   "cnf" -> Reduce(include = "include", "(", file_name, ")", "." => ActionFn(80);)
    //   "include" -> Reduce(include = "include", "(", file_name, ")", "." => ActionFn(80);)
    //
    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action80(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 30
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) lower_word ["]"]
    //   atomic_word = (*) single_quoted [","]
    //   atomic_word = (*) single_quoted ["]"]
    //   formula_selection = "," "[" (*) name_list "]" [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   integer = (*) r#"[+-]?[0-9]+"# ["]"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["]"]
    //   name = (*) atomic_word [","]
    //   name = (*) atomic_word ["]"]
    //   name = (*) integer [","]
    //   name = (*) integer ["]"]
    //   name_list = (*) name ["]"]
    //   name_list = (*) name "," name_list ["]"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["]"]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_word -> S12
    //   integer -> S13
    //   lower_word -> S14
    //   name -> S33
    //   name_list -> S34
    //   single_quoted -> S16
    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 31
    //   atomic_defined_word = (*) dollar_word ["!="]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["!="]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["!="]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," (*) cnf_formula ")" "." [EOF]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," (*) cnf_formula ")" "." ["cnf"]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," (*) cnf_formula ")" "." ["include"]
    //   cnf_formula = (*) disjunction [")"]
    //   cnf_formula = (*) "(" disjunction ")" [")"]
    //   constant = (*) functor ["!="]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object ["!="]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number ["!="]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term ["!="]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor ["!="]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["!="]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant ["!="]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["!="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom ["!="]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term ["!="]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   disjunction = (*) disjunction "|" literal [")"]
    //   disjunction = (*) disjunction "|" literal ["|"]
    //   disjunction = (*) literal [")"]
    //   disjunction = (*) literal ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["!="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["!="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = (*) term infix_inequality term [")"]
    //   fol_infix_unary = (*) term infix_inequality term ["|"]
    //   function_term = (*) defined_term ["!="]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["!="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["!="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["!="]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = (*) atomic_formula [")"]
    //   literal = (*) atomic_formula ["|"]
    //   literal = (*) fol_infix_unary [")"]
    //   literal = (*) fol_infix_unary ["|"]
    //   literal = (*) "~" atomic_formula [")"]
    //   literal = (*) "~" atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["!="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer ["!="]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational ["!="]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real ["!="]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant ["!="]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" ["!="]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["!="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["!="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["!="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["!="]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["!="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["!="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["!="]
    //   variable = (*) upper_word ["="]
    //
    //   "(" -> Shift(S65)
    //   "~" -> Shift(S66)
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_defined_word -> S35
    //   atomic_formula -> S36
    //   atomic_word -> S37
    //   cnf_formula -> S38
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_formula -> S41
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_infix_formula -> S45
    //   defined_plain_formula -> S46
    //   defined_plain_term -> S47
    //   defined_term -> S48
    //   disjunction -> S49
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   fol_infix_unary -> S52
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   literal -> S56
    //   lower_word -> S14
    //   number -> S57
    //   plain_atomic_formula -> S58
    //   plain_term -> S59
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S62
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::cnf__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::number(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::real(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 32
    //   include = "include" "(" file_name formula_selection ")" "." (*) [EOF]
    //   include = "include" "(" file_name formula_selection ")" "." (*) ["cnf"]
    //   include = "include" "(" file_name formula_selection ")" "." (*) ["include"]
    //
    //   EOF -> Reduce(include = "include", "(", file_name, formula_selection, ")", "." => ActionFn(79);)
    //   "cnf" -> Reduce(include = "include", "(", file_name, formula_selection, ")", "." => ActionFn(79);)
    //   "include" -> Reduce(include = "include", "(", file_name, formula_selection, ")", "." => ActionFn(79);)
    //
    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 33
    //   name_list = name (*) ["]"]
    //   name_list = name (*) "," name_list ["]"]
    //
    //   "," -> Shift(S72)
    //   "]" -> Reduce(name_list = name => ActionFn(52);)
    //
    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action52(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 34
    //   formula_selection = "," "[" name_list (*) "]" [")"]
    //
    //   "]" -> Shift(S73)
    //
    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 35
    //   defined_functor = atomic_defined_word (*) ["!="]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) ["="]
    //   defined_functor = atomic_defined_word (*) ["|"]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) ["="]
    //   defined_functor = atomic_defined_word (*) ["|"]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) [","]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) ["|"]
    //
    //   "!=" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "(" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   ")" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "," -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "=" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "|" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //
    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 36
    //   literal = atomic_formula (*) [")"]
    //   literal = atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(literal = atomic_formula => ActionFn(16);)
    //   "|" -> Reduce(literal = atomic_formula => ActionFn(16);)
    //
    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 37
    //   functor = atomic_word (*) ["!="]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) ["="]
    //   functor = atomic_word (*) ["|"]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) ["="]
    //   functor = atomic_word (*) ["|"]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) [","]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) ["|"]
    //
    //   "!=" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "(" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   ")" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "," -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "=" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "|" -> Reduce(functor = atomic_word => ActionFn(37);)
    //
    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 38
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula (*) ")" "." [EOF]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula (*) ")" "." ["cnf"]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula (*) ")" "." ["include"]
    //
    //   ")" -> Shift(S74)
    //
    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 39
    //   plain_term = constant (*) ["!="]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) ["="]
    //   plain_term = constant (*) ["|"]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) ["="]
    //   plain_term = constant (*) ["|"]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) [","]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) ["|"]
    //
    //   "!=" -> Reduce(plain_term = constant => ActionFn(34);)
    //   ")" -> Reduce(plain_term = constant => ActionFn(34);)
    //   "," -> Reduce(plain_term = constant => ActionFn(34);)
    //   "=" -> Reduce(plain_term = constant => ActionFn(34);)
    //   "|" -> Reduce(plain_term = constant => ActionFn(34);)
    //
    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 40
    //   defined_term = defined_atom (*) ["!="]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) ["="]
    //   defined_term = defined_atom (*) ["|"]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) ["="]
    //   defined_term = defined_atom (*) ["|"]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) [","]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) ["|"]
    //
    //   "!=" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   ")" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   "," -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   "=" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   "|" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //
    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 41
    //   atomic_formula = defined_atomic_formula (*) [")"]
    //   atomic_formula = defined_atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(atomic_formula = defined_atomic_formula => ActionFn(21);)
    //   "|" -> Reduce(atomic_formula = defined_atomic_formula => ActionFn(21);)
    //
    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action21(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 42
    //   defined_term = defined_atomic_term (*) ["!="]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) ["="]
    //   defined_term = defined_atomic_term (*) ["|"]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) ["="]
    //   defined_term = defined_atomic_term (*) ["|"]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) [","]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) ["|"]
    //
    //   "!=" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   ")" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   "," -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   "=" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   "|" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //
    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 43
    //   defined_plain_term = defined_constant (*) ["!="]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) ["="]
    //   defined_plain_term = defined_constant (*) ["|"]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) ["="]
    //   defined_plain_term = defined_constant (*) ["|"]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) [","]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) ["|"]
    //
    //   "!=" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   ")" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   "," -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   "=" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   "|" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //
    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action43(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 44
    //   defined_constant = defined_functor (*) ["!="]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) ["="]
    //   defined_constant = defined_functor (*) ["|"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["!="]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["="]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["|"]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) ["="]
    //   defined_constant = defined_functor (*) ["|"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["="]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["|"]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) [","]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [","]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) ["|"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["|"]
    //
    //   "!=" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "(" -> Shift(S75)
    //   ")" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "," -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "=" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "|" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //
    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 45
    //   defined_atomic_formula = defined_infix_formula (*) [")"]
    //   defined_atomic_formula = defined_infix_formula (*) ["|"]
    //
    //   ")" -> Reduce(defined_atomic_formula = defined_infix_formula => ActionFn(24);)
    //   "|" -> Reduce(defined_atomic_formula = defined_infix_formula => ActionFn(24);)
    //
    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 46
    //   defined_atomic_formula = defined_plain_formula (*) [")"]
    //   defined_atomic_formula = defined_plain_formula (*) ["|"]
    //
    //   ")" -> Reduce(defined_atomic_formula = defined_plain_formula => ActionFn(23);)
    //   "|" -> Reduce(defined_atomic_formula = defined_plain_formula => ActionFn(23);)
    //
    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action23(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 47
    //   defined_atomic_term = defined_plain_term (*) ["!="]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) ["="]
    //   defined_atomic_term = defined_plain_term (*) ["|"]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) ["="]
    //   defined_atomic_term = defined_plain_term (*) ["|"]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) [","]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) ["|"]
    //
    //   "!=" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   ")" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   "," -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   "=" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   "|" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //
    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 48
    //   defined_plain_formula = defined_term (*) [")"]
    //   defined_plain_formula = defined_term (*) ["|"]
    //   function_term = defined_term (*) ["!="]
    //   function_term = defined_term (*) ["="]
    //   defined_plain_formula = defined_term (*) [")"]
    //   defined_plain_formula = defined_term (*) ["|"]
    //   function_term = defined_term (*) ["="]
    //
    //   "!=" -> Reduce(function_term = defined_term => ActionFn(33);)
    //   ")" -> Reduce(defined_plain_formula = defined_term => ActionFn(25);)
    //   "=" -> Reduce(function_term = defined_term => ActionFn(33);)
    //   "|" -> Reduce(defined_plain_formula = defined_term => ActionFn(25);)
    //
    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action25(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__formula(__nt)));
            }
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 49
    //   cnf_formula = disjunction (*) [")"]
    //   disjunction = disjunction (*) "|" literal [")"]
    //   disjunction = disjunction (*) "|" literal ["|"]
    //
    //   ")" -> Reduce(cnf_formula = disjunction => ActionFn(13);)
    //   "|" -> Shift(S76)
    //
    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action13(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 50
    //   defined_atom = distinct_object (*) ["!="]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) ["="]
    //   defined_atom = distinct_object (*) ["|"]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) ["="]
    //   defined_atom = distinct_object (*) ["|"]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) [","]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) ["|"]
    //
    //   "!=" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   ")" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   "," -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   "=" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   "|" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //
    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 51
    //   atomic_defined_word = dollar_word (*) ["!="]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) ["="]
    //   atomic_defined_word = dollar_word (*) ["|"]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) ["="]
    //   atomic_defined_word = dollar_word (*) ["|"]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) [","]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) ["|"]
    //
    //   "!=" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "(" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   ")" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "," -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "=" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "|" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //
    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action58(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__defined__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 52
    //   literal = fol_infix_unary (*) [")"]
    //   literal = fol_infix_unary (*) ["|"]
    //
    //   ")" -> Reduce(literal = fol_infix_unary => ActionFn(18);)
    //   "|" -> Reduce(literal = fol_infix_unary => ActionFn(18);)
    //
    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 53
    //   term = function_term (*) ["!="]
    //   term = function_term (*) ["="]
    //   term = function_term (*) ["="]
    //   term = function_term (*) [")"]
    //   term = function_term (*) [","]
    //   term = function_term (*) [")"]
    //   term = function_term (*) ["|"]
    //
    //   "!=" -> Reduce(term = function_term => ActionFn(30);)
    //   ")" -> Reduce(term = function_term => ActionFn(30);)
    //   "," -> Reduce(term = function_term => ActionFn(30);)
    //   "=" -> Reduce(term = function_term => ActionFn(30);)
    //   "|" -> Reduce(term = function_term => ActionFn(30);)
    //
    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 54
    //   constant = functor (*) ["!="]
    //   constant = functor (*) [")"]
    //   constant = functor (*) ["="]
    //   constant = functor (*) ["|"]
    //   plain_term = functor (*) "(" arguments ")" ["!="]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" ["="]
    //   plain_term = functor (*) "(" arguments ")" ["|"]
    //   constant = functor (*) [")"]
    //   constant = functor (*) ["="]
    //   constant = functor (*) ["|"]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" ["="]
    //   plain_term = functor (*) "(" arguments ")" ["|"]
    //   constant = functor (*) [")"]
    //   constant = functor (*) [","]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" [","]
    //   constant = functor (*) [")"]
    //   constant = functor (*) ["|"]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" ["|"]
    //
    //   "!=" -> Reduce(constant = functor => ActionFn(36);)
    //   "(" -> Shift(S77)
    //   ")" -> Reduce(constant = functor => ActionFn(36);)
    //   "," -> Reduce(constant = functor => ActionFn(36);)
    //   "=" -> Reduce(constant = functor => ActionFn(36);)
    //   "|" -> Reduce(constant = functor => ActionFn(36);)
    //
    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action36(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 55
    //   number = integer (*) ["!="]
    //   number = integer (*) [")"]
    //   number = integer (*) ["="]
    //   number = integer (*) ["|"]
    //   number = integer (*) [")"]
    //   number = integer (*) ["="]
    //   number = integer (*) ["|"]
    //   number = integer (*) [")"]
    //   number = integer (*) [","]
    //   number = integer (*) [")"]
    //   number = integer (*) ["|"]
    //
    //   "!=" -> Reduce(number = integer => ActionFn(59);)
    //   ")" -> Reduce(number = integer => ActionFn(59);)
    //   "," -> Reduce(number = integer => ActionFn(59);)
    //   "=" -> Reduce(number = integer => ActionFn(59);)
    //   "|" -> Reduce(number = integer => ActionFn(59);)
    //
    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 56
    //   disjunction = literal (*) [")"]
    //   disjunction = literal (*) ["|"]
    //
    //   ")" -> Reduce(disjunction = literal => ActionFn(14);)
    //   "|" -> Reduce(disjunction = literal => ActionFn(14);)
    //
    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 57
    //   defined_atom = number (*) ["!="]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) ["="]
    //   defined_atom = number (*) ["|"]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) ["="]
    //   defined_atom = number (*) ["|"]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) [","]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) ["|"]
    //
    //   "!=" -> Reduce(defined_atom = number => ActionFn(40);)
    //   ")" -> Reduce(defined_atom = number => ActionFn(40);)
    //   "," -> Reduce(defined_atom = number => ActionFn(40);)
    //   "=" -> Reduce(defined_atom = number => ActionFn(40);)
    //   "|" -> Reduce(defined_atom = number => ActionFn(40);)
    //
    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 58
    //   atomic_formula = plain_atomic_formula (*) [")"]
    //   atomic_formula = plain_atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(atomic_formula = plain_atomic_formula => ActionFn(20);)
    //   "|" -> Reduce(atomic_formula = plain_atomic_formula => ActionFn(20);)
    //
    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action20(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 59
    //   function_term = plain_term (*) ["!="]
    //   function_term = plain_term (*) ["="]
    //   plain_atomic_formula = plain_term (*) [")"]
    //   plain_atomic_formula = plain_term (*) ["|"]
    //   function_term = plain_term (*) ["="]
    //   plain_atomic_formula = plain_term (*) [")"]
    //   plain_atomic_formula = plain_term (*) ["|"]
    //
    //   "!=" -> Reduce(function_term = plain_term => ActionFn(32);)
    //   ")" -> Reduce(plain_atomic_formula = plain_term => ActionFn(22);)
    //   "=" -> Reduce(function_term = plain_term => ActionFn(32);)
    //   "|" -> Reduce(plain_atomic_formula = plain_term => ActionFn(22);)
    //
    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action22(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 60
    //   number = rational (*) ["!="]
    //   number = rational (*) [")"]
    //   number = rational (*) ["="]
    //   number = rational (*) ["|"]
    //   number = rational (*) [")"]
    //   number = rational (*) ["="]
    //   number = rational (*) ["|"]
    //   number = rational (*) [")"]
    //   number = rational (*) [","]
    //   number = rational (*) [")"]
    //   number = rational (*) ["|"]
    //
    //   "!=" -> Reduce(number = rational => ActionFn(60);)
    //   ")" -> Reduce(number = rational => ActionFn(60);)
    //   "," -> Reduce(number = rational => ActionFn(60);)
    //   "=" -> Reduce(number = rational => ActionFn(60);)
    //   "|" -> Reduce(number = rational => ActionFn(60);)
    //
    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action60(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 61
    //   number = real (*) ["!="]
    //   number = real (*) [")"]
    //   number = real (*) ["="]
    //   number = real (*) ["|"]
    //   number = real (*) [")"]
    //   number = real (*) ["="]
    //   number = real (*) ["|"]
    //   number = real (*) [")"]
    //   number = real (*) [","]
    //   number = real (*) [")"]
    //   number = real (*) ["|"]
    //
    //   "!=" -> Reduce(number = real => ActionFn(61);)
    //   ")" -> Reduce(number = real => ActionFn(61);)
    //   "," -> Reduce(number = real => ActionFn(61);)
    //   "=" -> Reduce(number = real => ActionFn(61);)
    //   "|" -> Reduce(number = real => ActionFn(61);)
    //
    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action61(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 62
    //   defined_infix_formula = term (*) defined_infix_pred term [")"]
    //   defined_infix_formula = term (*) defined_infix_pred term ["|"]
    //   defined_infix_pred = (*) infix_equality [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   defined_infix_pred = (*) infix_equality [r#"[a-z][a-zA-Z0-9_]*"#]
    //   fol_infix_unary = term (*) infix_inequality term [")"]
    //   fol_infix_unary = term (*) infix_inequality term ["|"]
    //   infix_equality = (*) "=" [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_equality = (*) "=" [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_equality = (*) "=" [r#"[a-z][a-zA-Z0-9_]*"#]
    //   infix_inequality = (*) "!=" [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_inequality = (*) "!=" [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_inequality = (*) "!=" [r#"[+-]?[0-9]+"#]
    //   infix_inequality = (*) "!=" [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_inequality = (*) "!=" [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_inequality = (*) "!=" [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_inequality = (*) "!=" [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_inequality = (*) "!=" [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   "!=" -> Shift(S81)
    //   "=" -> Shift(S82)
    //
    //   defined_infix_pred -> S78
    //   infix_equality -> S79
    //   infix_inequality -> S80
    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::infix__inequality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state80(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 63
    //   variable = upper_word (*) ["!="]
    //   variable = upper_word (*) ["="]
    //   variable = upper_word (*) ["="]
    //   variable = upper_word (*) [")"]
    //   variable = upper_word (*) [","]
    //   variable = upper_word (*) [")"]
    //   variable = upper_word (*) ["|"]
    //
    //   "!=" -> Reduce(variable = upper_word => ActionFn(47);)
    //   ")" -> Reduce(variable = upper_word => ActionFn(47);)
    //   "," -> Reduce(variable = upper_word => ActionFn(47);)
    //   "=" -> Reduce(variable = upper_word => ActionFn(47);)
    //   "|" -> Reduce(variable = upper_word => ActionFn(47);)
    //
    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action47(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::variable(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 64
    //   term = variable (*) ["!="]
    //   term = variable (*) ["="]
    //   term = variable (*) ["="]
    //   term = variable (*) [")"]
    //   term = variable (*) [","]
    //   term = variable (*) [")"]
    //   term = variable (*) ["|"]
    //
    //   "!=" -> Reduce(term = variable => ActionFn(31);)
    //   ")" -> Reduce(term = variable => ActionFn(31);)
    //   "," -> Reduce(term = variable => ActionFn(31);)
    //   "=" -> Reduce(term = variable => ActionFn(31);)
    //   "|" -> Reduce(term = variable => ActionFn(31);)
    //
    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 65
    //   atomic_defined_word = (*) dollar_word ["!="]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["!="]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["!="]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   cnf_formula = "(" (*) disjunction ")" [")"]
    //   constant = (*) functor ["!="]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object ["!="]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number ["!="]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term ["!="]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor ["!="]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["!="]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant ["!="]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["!="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom ["!="]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term ["!="]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   disjunction = (*) disjunction "|" literal [")"]
    //   disjunction = (*) disjunction "|" literal ["|"]
    //   disjunction = (*) literal [")"]
    //   disjunction = (*) literal ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["!="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["!="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = (*) term infix_inequality term [")"]
    //   fol_infix_unary = (*) term infix_inequality term ["|"]
    //   function_term = (*) defined_term ["!="]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["!="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["!="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["!="]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = (*) atomic_formula [")"]
    //   literal = (*) atomic_formula ["|"]
    //   literal = (*) fol_infix_unary [")"]
    //   literal = (*) fol_infix_unary ["|"]
    //   literal = (*) "~" atomic_formula [")"]
    //   literal = (*) "~" atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["!="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer ["!="]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational ["!="]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real ["!="]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant ["!="]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" ["!="]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["!="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["!="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["!="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["!="]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["!="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["!="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["!="]
    //   variable = (*) upper_word ["="]
    //
    //   "~" -> Shift(S66)
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_defined_word -> S35
    //   atomic_formula -> S36
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_formula -> S41
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_infix_formula -> S45
    //   defined_plain_formula -> S46
    //   defined_plain_term -> S47
    //   defined_term -> S48
    //   disjunction -> S83
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   fol_infix_unary -> S52
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   literal -> S56
    //   lower_word -> S14
    //   number -> S57
    //   plain_atomic_formula -> S58
    //   plain_term -> S59
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S62
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state83(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 66
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = "~" (*) atomic_formula [")"]
    //   literal = "~" (*) atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["="]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_defined_word -> S35
    //   atomic_formula -> S84
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_formula -> S41
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_infix_formula -> S45
    //   defined_plain_formula -> S46
    //   defined_plain_term -> S47
    //   defined_term -> S48
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   lower_word -> S14
    //   number -> S57
    //   plain_atomic_formula -> S58
    //   plain_term -> S59
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S85
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state84(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state85(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 67
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["!="]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [","]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "!=" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "(" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   ")" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "," -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "=" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "|" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //
    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 68
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["!="]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["="]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["|"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["="]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["|"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [","]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["|"]
    //
    //   "!=" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   ")" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   "," -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   "=" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   "|" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //
    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::real(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 69
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["!="]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["="]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["|"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["="]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["|"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [","]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["|"]
    //
    //   "!=" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   ")" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   "," -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   "=" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   "|" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //
    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action69(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::rational(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 70
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["!="]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["="]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["="]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) [")"]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) [","]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) [")"]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "!=" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   ")" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   "," -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   "=" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   "|" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //
    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action66(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::upper__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 71
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["!="]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["="]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["|"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["="]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["|"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [","]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["|"]
    //
    //   "!=" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   ")" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   "," -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   "=" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   "|" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //
    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action64(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 72
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) lower_word ["]"]
    //   atomic_word = (*) single_quoted [","]
    //   atomic_word = (*) single_quoted ["]"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   integer = (*) r#"[+-]?[0-9]+"# ["]"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["]"]
    //   name = (*) atomic_word [","]
    //   name = (*) atomic_word ["]"]
    //   name = (*) integer [","]
    //   name = (*) integer ["]"]
    //   name_list = (*) name ["]"]
    //   name_list = (*) name "," name_list ["]"]
    //   name_list = name "," (*) name_list ["]"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["]"]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_word -> S12
    //   integer -> S13
    //   lower_word -> S14
    //   name -> S33
    //   name_list -> S86
    //   single_quoted -> S16
    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state86(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 73
    //   formula_selection = "," "[" name_list "]" (*) [")"]
    //
    //   ")" -> Reduce(formula_selection = ",", "[", name_list, "]" => ActionFn(51);)
    //
    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action51(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__selection(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 74
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" (*) "." [EOF]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" (*) "." ["cnf"]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" (*) "." ["include"]
    //
    //   "." -> Shift(S87)
    //
    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 75
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["!="]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["="]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["="]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   arguments -> S88
    //   atomic_defined_word -> S35
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_plain_term -> S47
    //   defined_term -> S89
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   lower_word -> S14
    //   number -> S57
    //   plain_term -> S90
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S91
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 76
    //   atomic_defined_word = (*) dollar_word ["!="]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["!="]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["!="]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor ["!="]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object ["!="]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number ["!="]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term ["!="]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor ["!="]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["!="]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant ["!="]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["!="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom ["!="]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term ["!="]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   disjunction = disjunction "|" (*) literal [")"]
    //   disjunction = disjunction "|" (*) literal ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["!="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["!="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = (*) term infix_inequality term [")"]
    //   fol_infix_unary = (*) term infix_inequality term ["|"]
    //   function_term = (*) defined_term ["!="]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["!="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["!="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["!="]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = (*) atomic_formula [")"]
    //   literal = (*) atomic_formula ["|"]
    //   literal = (*) fol_infix_unary [")"]
    //   literal = (*) fol_infix_unary ["|"]
    //   literal = (*) "~" atomic_formula [")"]
    //   literal = (*) "~" atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["!="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer ["!="]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational ["!="]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real ["!="]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant ["!="]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" ["!="]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["!="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["!="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["!="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["!="]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["!="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["!="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["!="]
    //   variable = (*) upper_word ["="]
    //
    //   "~" -> Shift(S66)
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_defined_word -> S35
    //   atomic_formula -> S36
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_formula -> S41
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_infix_formula -> S45
    //   defined_plain_formula -> S46
    //   defined_plain_term -> S47
    //   defined_term -> S48
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   fol_infix_unary -> S52
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   literal -> S92
    //   lower_word -> S14
    //   number -> S57
    //   plain_atomic_formula -> S58
    //   plain_term -> S59
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S62
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 77
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" ["!="]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" ["="]
    //   plain_term = functor "(" (*) arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" ["="]
    //   plain_term = functor "(" (*) arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   arguments -> S93
    //   atomic_defined_word -> S35
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_plain_term -> S47
    //   defined_term -> S89
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   lower_word -> S14
    //   number -> S57
    //   plain_term -> S90
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S91
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state93(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 78
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = term defined_infix_pred (*) term [")"]
    //   defined_infix_formula = term defined_infix_pred (*) term ["|"]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term ["|"]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term ["|"]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer [")"]
    //   number = (*) integer ["|"]
    //   number = (*) rational [")"]
    //   number = (*) rational ["|"]
    //   number = (*) real [")"]
    //   number = (*) real ["|"]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term [")"]
    //   term = (*) function_term ["|"]
    //   term = (*) variable [")"]
    //   term = (*) variable ["|"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["|"]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word ["|"]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_defined_word -> S35
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_plain_term -> S47
    //   defined_term -> S89
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   lower_word -> S14
    //   number -> S57
    //   plain_term -> S90
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S94
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state94(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 79
    //   defined_infix_pred = infix_equality (*) [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = infix_equality (*) [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   defined_infix_pred = infix_equality (*) [r#"[+-]?[0-9]+"#]
    //   defined_infix_pred = infix_equality (*) [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   defined_infix_pred = infix_equality (*) [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   defined_infix_pred = infix_equality (*) [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = infix_equality (*) [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   defined_infix_pred = infix_equality (*) [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[+-]?[0-9]+"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //
    pub fn __state79<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action27(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__pred(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 80
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = term infix_inequality (*) term [")"]
    //   fol_infix_unary = term infix_inequality (*) term ["|"]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term ["|"]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term ["|"]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer [")"]
    //   number = (*) integer ["|"]
    //   number = (*) rational [")"]
    //   number = (*) rational ["|"]
    //   number = (*) real [")"]
    //   number = (*) real ["|"]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term [")"]
    //   term = (*) function_term ["|"]
    //   term = (*) variable [")"]
    //   term = (*) variable ["|"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["|"]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word ["|"]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   atomic_defined_word -> S35
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_plain_term -> S47
    //   defined_term -> S89
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   lower_word -> S14
    //   number -> S57
    //   plain_term -> S90
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S95
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state80<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state95(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 81
    //   infix_inequality = "!=" (*) [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_inequality = "!=" (*) [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_inequality = "!=" (*) [r#"[+-]?[0-9]+"#]
    //   infix_inequality = "!=" (*) [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_inequality = "!=" (*) [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_inequality = "!=" (*) [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_inequality = "!=" (*) [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_inequality = "!=" (*) [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[+-]?[0-9]+"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //
    pub fn __state81<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__inequality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 82
    //   infix_equality = "=" (*) [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = "=" (*) [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_equality = "=" (*) [r#"[+-]?[0-9]+"#]
    //   infix_equality = "=" (*) [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_equality = "=" (*) [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_equality = "=" (*) [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_equality = "=" (*) [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_equality = "=" (*) [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[+-]?[0-9]+"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //
    pub fn __state82<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__equality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 83
    //   cnf_formula = "(" disjunction (*) ")" [")"]
    //   disjunction = disjunction (*) "|" literal [")"]
    //   disjunction = disjunction (*) "|" literal ["|"]
    //
    //   ")" -> Shift(S96)
    //   "|" -> Shift(S76)
    //
    pub fn __state83<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 84
    //   literal = "~" atomic_formula (*) [")"]
    //   literal = "~" atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(literal = "~", atomic_formula => ActionFn(17);)
    //   "|" -> Reduce(literal = "~", atomic_formula => ActionFn(17);)
    //
    pub fn __state84<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action17(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 85
    //   defined_infix_formula = term (*) defined_infix_pred term [")"]
    //   defined_infix_formula = term (*) defined_infix_pred term ["|"]
    //   defined_infix_pred = (*) infix_equality [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   defined_infix_pred = (*) infix_equality [r#"[a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_equality = (*) "=" [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_equality = (*) "=" [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   "=" -> Shift(S82)
    //
    //   defined_infix_pred -> S78
    //   infix_equality -> S79
    pub fn __state85<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 86
    //   name_list = name "," name_list (*) ["]"]
    //
    //   "]" -> Reduce(name_list = name, ",", name_list => ActionFn(53);)
    //
    pub fn __state86<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action53(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 87
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" "." (*) [EOF]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" "." (*) ["cnf"]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" "." (*) ["include"]
    //
    //   EOF -> Reduce(cnf_annotated = "cnf", "(", name, ",", formula_role, ",", cnf_formula, ")", "." => ActionFn(10);)
    //   "cnf" -> Reduce(cnf_annotated = "cnf", "(", name, ",", formula_role, ",", cnf_formula, ")", "." => ActionFn(10);)
    //   "include" -> Reduce(cnf_annotated = "cnf", "(", name, ",", formula_role, ",", cnf_formula, ")", "." => ActionFn(10);)
    //
    pub fn __state87<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __nt = super::__action10(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 88
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["!="]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["="]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["|"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["="]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["|"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [","]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["|"]
    //
    //   ")" -> Shift(S97)
    //
    pub fn __state88<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 89
    //   function_term = defined_term (*) [")"]
    //   function_term = defined_term (*) [","]
    //   function_term = defined_term (*) [")"]
    //   function_term = defined_term (*) ["|"]
    //
    //   ")" -> Reduce(function_term = defined_term => ActionFn(33);)
    //   "," -> Reduce(function_term = defined_term => ActionFn(33);)
    //   "|" -> Reduce(function_term = defined_term => ActionFn(33);)
    //
    pub fn __state89<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 90
    //   function_term = plain_term (*) [")"]
    //   function_term = plain_term (*) [","]
    //   function_term = plain_term (*) [")"]
    //   function_term = plain_term (*) ["|"]
    //
    //   ")" -> Reduce(function_term = plain_term => ActionFn(32);)
    //   "," -> Reduce(function_term = plain_term => ActionFn(32);)
    //   "|" -> Reduce(function_term = plain_term => ActionFn(32);)
    //
    pub fn __state90<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 91
    //   arguments = term (*) [")"]
    //   arguments = term (*) "," arguments [")"]
    //
    //   ")" -> Reduce(arguments = term => ActionFn(48);)
    //   "," -> Shift(S98)
    //
    pub fn __state91<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state98(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 92
    //   disjunction = disjunction "|" literal (*) [")"]
    //   disjunction = disjunction "|" literal (*) ["|"]
    //
    //   ")" -> Reduce(disjunction = disjunction, "|", literal => ActionFn(15);)
    //   "|" -> Reduce(disjunction = disjunction, "|", literal => ActionFn(15);)
    //
    pub fn __state92<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action15(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 93
    //   plain_term = functor "(" arguments (*) ")" ["!="]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" ["="]
    //   plain_term = functor "(" arguments (*) ")" ["|"]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" ["="]
    //   plain_term = functor "(" arguments (*) ")" ["|"]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" [","]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" ["|"]
    //
    //   ")" -> Shift(S99)
    //
    pub fn __state93<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state99(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 94
    //   defined_infix_formula = term defined_infix_pred term (*) [")"]
    //   defined_infix_formula = term defined_infix_pred term (*) ["|"]
    //
    //   ")" -> Reduce(defined_infix_formula = term, defined_infix_pred, term => ActionFn(26);)
    //   "|" -> Reduce(defined_infix_formula = term, defined_infix_pred, term => ActionFn(26);)
    //
    pub fn __state94<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action26(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 95
    //   fol_infix_unary = term infix_inequality term (*) [")"]
    //   fol_infix_unary = term infix_inequality term (*) ["|"]
    //
    //   ")" -> Reduce(fol_infix_unary = term, infix_inequality, term => ActionFn(19);)
    //   "|" -> Reduce(fol_infix_unary = term, infix_inequality, term => ActionFn(19);)
    //
    pub fn __state95<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__infix__unary(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 96
    //   cnf_formula = "(" disjunction ")" (*) [")"]
    //
    //   ")" -> Reduce(cnf_formula = "(", disjunction, ")" => ActionFn(12);)
    //
    pub fn __state96<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action12(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 97
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["!="]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["="]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["|"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["="]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["|"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [","]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["|"]
    //
    //   "!=" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   ")" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   "," -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   "=" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   "|" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //
    pub fn __state97<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 98
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   arguments = term "," (*) arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S67)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S17)
    //   r#"[+-]?[0-9]+"# -> Shift(S18)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S68)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S69)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S70)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S71)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   arguments -> S100
    //   atomic_defined_word -> S35
    //   atomic_word -> S37
    //   constant -> S39
    //   defined_atom -> S40
    //   defined_atomic_term -> S42
    //   defined_constant -> S43
    //   defined_functor -> S44
    //   defined_plain_term -> S47
    //   defined_term -> S89
    //   distinct_object -> S50
    //   dollar_word -> S51
    //   function_term -> S53
    //   functor -> S54
    //   integer -> S55
    //   lower_word -> S14
    //   number -> S57
    //   plain_term -> S90
    //   rational -> S60
    //   real -> S61
    //   single_quoted -> S16
    //   term -> S91
    //   upper_word -> S63
    //   variable -> S64
    pub fn __state98<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state100(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state90(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state61(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 99
    //   plain_term = functor "(" arguments ")" (*) ["!="]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) ["="]
    //   plain_term = functor "(" arguments ")" (*) ["|"]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) ["="]
    //   plain_term = functor "(" arguments ")" (*) ["|"]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) [","]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) ["|"]
    //
    //   "!=" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   ")" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   "," -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   "=" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   "|" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //
    pub fn __state99<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 100
    //   arguments = term "," arguments (*) [")"]
    //
    //   ")" -> Reduce(arguments = term, ",", arguments => ActionFn(49);)
    //
    pub fn __state100<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__TPTP_file::parse_TPTP_file;

mod __parse__cnf_annotated {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use parser::tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_cnf_annotated<
        'input,
    >(
        input: &'input str,
    ) -> Result<CnfAnnotated, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____cnf__annotated(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fol__infix__unary(Formula),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        upper__word(String),
        variable(String),
    }

    // State 0
    //   __cnf_annotated = (*) cnf_annotated [EOF]
    //   cnf_annotated = (*) "cnf" "(" name "," formula_role "," cnf_formula ")" "." [EOF]
    //
    //   "cnf" -> Shift(S2)
    //
    //   cnf_annotated -> S1
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::cnf__annotated(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __cnf_annotated = cnf_annotated (*) [EOF]
    //
    //   EOF -> Reduce(__cnf_annotated = cnf_annotated => ActionFn(1);)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<CnfAnnotated>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action1(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____cnf__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   cnf_annotated = "cnf" (*) "(" name "," formula_role "," cnf_formula ")" "." [EOF]
    //
    //   "(" -> Shift(S3)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 3
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted [","]
    //   cnf_annotated = "cnf" "(" (*) name "," formula_role "," cnf_formula ")" "." [EOF]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   name = (*) atomic_word [","]
    //   name = (*) integer [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   atomic_word -> S4
    //   integer -> S5
    //   lower_word -> S6
    //   name -> S7
    //   single_quoted -> S8
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 4
    //   name = atomic_word (*) [","]
    //
    //   "," -> Reduce(name = atomic_word => ActionFn(54);)
    //
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action54(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 5
    //   name = integer (*) [","]
    //
    //   "," -> Reduce(name = integer => ActionFn(55);)
    //
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action55(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 6
    //   atomic_word = lower_word (*) [","]
    //   atomic_word = lower_word (*) ["!="]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) ["="]
    //   atomic_word = lower_word (*) ["|"]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) ["="]
    //   atomic_word = lower_word (*) ["|"]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) [","]
    //   atomic_word = lower_word (*) ["("]
    //   atomic_word = lower_word (*) [")"]
    //   atomic_word = lower_word (*) ["|"]
    //
    //   "!=" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "(" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   ")" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "," -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "=" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "|" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action56(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 7
    //   cnf_annotated = "cnf" "(" name (*) "," formula_role "," cnf_formula ")" "." [EOF]
    //
    //   "," -> Shift(S12)
    //
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 8
    //   atomic_word = single_quoted (*) [","]
    //   atomic_word = single_quoted (*) ["!="]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) ["="]
    //   atomic_word = single_quoted (*) ["|"]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) ["="]
    //   atomic_word = single_quoted (*) ["|"]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) [","]
    //   atomic_word = single_quoted (*) ["("]
    //   atomic_word = single_quoted (*) [")"]
    //   atomic_word = single_quoted (*) ["|"]
    //
    //   "!=" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "(" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   ")" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "," -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "=" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "|" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action57(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 9
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["!="]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["="]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["|"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["="]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["|"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["("]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["|"]
    //
    //   "!=" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "(" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   ")" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "," -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "=" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "|" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 10
    //   integer = r#"[+-]?[0-9]+"# (*) [","]
    //   integer = r#"[+-]?[0-9]+"# (*) ["!="]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) ["="]
    //   integer = r#"[+-]?[0-9]+"# (*) ["|"]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) ["="]
    //   integer = r#"[+-]?[0-9]+"# (*) ["|"]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) [","]
    //   integer = r#"[+-]?[0-9]+"# (*) [")"]
    //   integer = r#"[+-]?[0-9]+"# (*) ["|"]
    //
    //   "!=" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   ")" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "," -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "=" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "|" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action70(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 11
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [","]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["!="]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [","]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "!=" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "(" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   ")" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "," -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "=" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "|" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::lower__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 12
    //   cnf_annotated = "cnf" "(" name "," (*) formula_role "," cnf_formula ")" "." [EOF]
    //   formula_role = (*) lower_word [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   formula_role -> S13
    //   lower_word -> S14
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__role(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 13
    //   cnf_annotated = "cnf" "(" name "," formula_role (*) "," cnf_formula ")" "." [EOF]
    //
    //   "," -> Shift(S15)
    //
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 14
    //   formula_role = lower_word (*) [","]
    //
    //   "," -> Reduce(formula_role = lower_word => ActionFn(11);)
    //
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action11(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__role(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 15
    //   atomic_defined_word = (*) dollar_word ["!="]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["!="]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["!="]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   cnf_annotated = "cnf" "(" name "," formula_role "," (*) cnf_formula ")" "." [EOF]
    //   cnf_formula = (*) disjunction [")"]
    //   cnf_formula = (*) "(" disjunction ")" [")"]
    //   constant = (*) functor ["!="]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object ["!="]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number ["!="]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term ["!="]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor ["!="]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["!="]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant ["!="]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["!="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom ["!="]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term ["!="]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   disjunction = (*) disjunction "|" literal [")"]
    //   disjunction = (*) disjunction "|" literal ["|"]
    //   disjunction = (*) literal [")"]
    //   disjunction = (*) literal ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["!="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["!="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = (*) term infix_inequality term [")"]
    //   fol_infix_unary = (*) term infix_inequality term ["|"]
    //   function_term = (*) defined_term ["!="]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["!="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["!="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["!="]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = (*) atomic_formula [")"]
    //   literal = (*) atomic_formula ["|"]
    //   literal = (*) fol_infix_unary [")"]
    //   literal = (*) fol_infix_unary ["|"]
    //   literal = (*) "~" atomic_formula [")"]
    //   literal = (*) "~" atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["!="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer ["!="]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational ["!="]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real ["!="]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant ["!="]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" ["!="]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["!="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["!="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["!="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["!="]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["!="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["!="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["!="]
    //   variable = (*) upper_word ["="]
    //
    //   "(" -> Shift(S46)
    //   "~" -> Shift(S47)
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   atomic_defined_word -> S16
    //   atomic_formula -> S17
    //   atomic_word -> S18
    //   cnf_formula -> S19
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_formula -> S22
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_infix_formula -> S26
    //   defined_plain_formula -> S27
    //   defined_plain_term -> S28
    //   defined_term -> S29
    //   disjunction -> S30
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   fol_infix_unary -> S33
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   literal -> S37
    //   lower_word -> S6
    //   number -> S38
    //   plain_atomic_formula -> S39
    //   plain_term -> S40
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S43
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::cnf__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::number(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::real(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 16
    //   defined_functor = atomic_defined_word (*) ["!="]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) ["="]
    //   defined_functor = atomic_defined_word (*) ["|"]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) ["="]
    //   defined_functor = atomic_defined_word (*) ["|"]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) [","]
    //   defined_functor = atomic_defined_word (*) ["("]
    //   defined_functor = atomic_defined_word (*) [")"]
    //   defined_functor = atomic_defined_word (*) ["|"]
    //
    //   "!=" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "(" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   ")" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "," -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "=" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //   "|" -> Reduce(defined_functor = atomic_defined_word => ActionFn(46);)
    //
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action46(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 17
    //   literal = atomic_formula (*) [")"]
    //   literal = atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(literal = atomic_formula => ActionFn(16);)
    //   "|" -> Reduce(literal = atomic_formula => ActionFn(16);)
    //
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 18
    //   functor = atomic_word (*) ["!="]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) ["="]
    //   functor = atomic_word (*) ["|"]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) ["="]
    //   functor = atomic_word (*) ["|"]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) [","]
    //   functor = atomic_word (*) ["("]
    //   functor = atomic_word (*) [")"]
    //   functor = atomic_word (*) ["|"]
    //
    //   "!=" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "(" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   ")" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "," -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "=" -> Reduce(functor = atomic_word => ActionFn(37);)
    //   "|" -> Reduce(functor = atomic_word => ActionFn(37);)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::functor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 19
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula (*) ")" "." [EOF]
    //
    //   ")" -> Shift(S53)
    //
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state53(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 20
    //   plain_term = constant (*) ["!="]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) ["="]
    //   plain_term = constant (*) ["|"]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) ["="]
    //   plain_term = constant (*) ["|"]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) [","]
    //   plain_term = constant (*) [")"]
    //   plain_term = constant (*) ["|"]
    //
    //   "!=" -> Reduce(plain_term = constant => ActionFn(34);)
    //   ")" -> Reduce(plain_term = constant => ActionFn(34);)
    //   "," -> Reduce(plain_term = constant => ActionFn(34);)
    //   "=" -> Reduce(plain_term = constant => ActionFn(34);)
    //   "|" -> Reduce(plain_term = constant => ActionFn(34);)
    //
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 21
    //   defined_term = defined_atom (*) ["!="]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) ["="]
    //   defined_term = defined_atom (*) ["|"]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) ["="]
    //   defined_term = defined_atom (*) ["|"]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) [","]
    //   defined_term = defined_atom (*) [")"]
    //   defined_term = defined_atom (*) ["|"]
    //
    //   "!=" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   ")" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   "," -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   "=" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //   "|" -> Reduce(defined_term = defined_atom => ActionFn(38);)
    //
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 22
    //   atomic_formula = defined_atomic_formula (*) [")"]
    //   atomic_formula = defined_atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(atomic_formula = defined_atomic_formula => ActionFn(21);)
    //   "|" -> Reduce(atomic_formula = defined_atomic_formula => ActionFn(21);)
    //
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action21(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 23
    //   defined_term = defined_atomic_term (*) ["!="]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) ["="]
    //   defined_term = defined_atomic_term (*) ["|"]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) ["="]
    //   defined_term = defined_atomic_term (*) ["|"]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) [","]
    //   defined_term = defined_atomic_term (*) [")"]
    //   defined_term = defined_atomic_term (*) ["|"]
    //
    //   "!=" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   ")" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   "," -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   "=" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //   "|" -> Reduce(defined_term = defined_atomic_term => ActionFn(39);)
    //
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 24
    //   defined_plain_term = defined_constant (*) ["!="]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) ["="]
    //   defined_plain_term = defined_constant (*) ["|"]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) ["="]
    //   defined_plain_term = defined_constant (*) ["|"]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) [","]
    //   defined_plain_term = defined_constant (*) [")"]
    //   defined_plain_term = defined_constant (*) ["|"]
    //
    //   "!=" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   ")" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   "," -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   "=" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //   "|" -> Reduce(defined_plain_term = defined_constant => ActionFn(43);)
    //
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action43(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 25
    //   defined_constant = defined_functor (*) ["!="]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) ["="]
    //   defined_constant = defined_functor (*) ["|"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["!="]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["="]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["|"]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) ["="]
    //   defined_constant = defined_functor (*) ["|"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["="]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["|"]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) [","]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [","]
    //   defined_constant = defined_functor (*) [")"]
    //   defined_constant = defined_functor (*) ["|"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" [")"]
    //   defined_plain_term = defined_functor (*) "(" arguments ")" ["|"]
    //
    //   "!=" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "(" -> Shift(S54)
    //   ")" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "," -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "=" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //   "|" -> Reduce(defined_constant = defined_functor => ActionFn(45);)
    //
    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action45(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 26
    //   defined_atomic_formula = defined_infix_formula (*) [")"]
    //   defined_atomic_formula = defined_infix_formula (*) ["|"]
    //
    //   ")" -> Reduce(defined_atomic_formula = defined_infix_formula => ActionFn(24);)
    //   "|" -> Reduce(defined_atomic_formula = defined_infix_formula => ActionFn(24);)
    //
    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 27
    //   defined_atomic_formula = defined_plain_formula (*) [")"]
    //   defined_atomic_formula = defined_plain_formula (*) ["|"]
    //
    //   ")" -> Reduce(defined_atomic_formula = defined_plain_formula => ActionFn(23);)
    //   "|" -> Reduce(defined_atomic_formula = defined_plain_formula => ActionFn(23);)
    //
    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action23(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 28
    //   defined_atomic_term = defined_plain_term (*) ["!="]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) ["="]
    //   defined_atomic_term = defined_plain_term (*) ["|"]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) ["="]
    //   defined_atomic_term = defined_plain_term (*) ["|"]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) [","]
    //   defined_atomic_term = defined_plain_term (*) [")"]
    //   defined_atomic_term = defined_plain_term (*) ["|"]
    //
    //   "!=" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   ")" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   "," -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   "=" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //   "|" -> Reduce(defined_atomic_term = defined_plain_term => ActionFn(42);)
    //
    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atomic__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 29
    //   defined_plain_formula = defined_term (*) [")"]
    //   defined_plain_formula = defined_term (*) ["|"]
    //   function_term = defined_term (*) ["!="]
    //   function_term = defined_term (*) ["="]
    //   defined_plain_formula = defined_term (*) [")"]
    //   defined_plain_formula = defined_term (*) ["|"]
    //   function_term = defined_term (*) ["="]
    //
    //   "!=" -> Reduce(function_term = defined_term => ActionFn(33);)
    //   ")" -> Reduce(defined_plain_formula = defined_term => ActionFn(25);)
    //   "=" -> Reduce(function_term = defined_term => ActionFn(33);)
    //   "|" -> Reduce(defined_plain_formula = defined_term => ActionFn(25);)
    //
    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action25(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__formula(__nt)));
            }
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 30
    //   cnf_formula = disjunction (*) [")"]
    //   disjunction = disjunction (*) "|" literal [")"]
    //   disjunction = disjunction (*) "|" literal ["|"]
    //
    //   ")" -> Reduce(cnf_formula = disjunction => ActionFn(13);)
    //   "|" -> Shift(S55)
    //
    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action13(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 31
    //   defined_atom = distinct_object (*) ["!="]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) ["="]
    //   defined_atom = distinct_object (*) ["|"]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) ["="]
    //   defined_atom = distinct_object (*) ["|"]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) [","]
    //   defined_atom = distinct_object (*) [")"]
    //   defined_atom = distinct_object (*) ["|"]
    //
    //   "!=" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   ")" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   "," -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   "=" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //   "|" -> Reduce(defined_atom = distinct_object => ActionFn(41);)
    //
    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 32
    //   atomic_defined_word = dollar_word (*) ["!="]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) ["="]
    //   atomic_defined_word = dollar_word (*) ["|"]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) ["="]
    //   atomic_defined_word = dollar_word (*) ["|"]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) [","]
    //   atomic_defined_word = dollar_word (*) ["("]
    //   atomic_defined_word = dollar_word (*) [")"]
    //   atomic_defined_word = dollar_word (*) ["|"]
    //
    //   "!=" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "(" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   ")" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "," -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "=" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //   "|" -> Reduce(atomic_defined_word = dollar_word => ActionFn(58);)
    //
    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action58(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__defined__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 33
    //   literal = fol_infix_unary (*) [")"]
    //   literal = fol_infix_unary (*) ["|"]
    //
    //   ")" -> Reduce(literal = fol_infix_unary => ActionFn(18);)
    //   "|" -> Reduce(literal = fol_infix_unary => ActionFn(18);)
    //
    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 34
    //   term = function_term (*) ["!="]
    //   term = function_term (*) ["="]
    //   term = function_term (*) ["="]
    //   term = function_term (*) [")"]
    //   term = function_term (*) [","]
    //   term = function_term (*) [")"]
    //   term = function_term (*) ["|"]
    //
    //   "!=" -> Reduce(term = function_term => ActionFn(30);)
    //   ")" -> Reduce(term = function_term => ActionFn(30);)
    //   "," -> Reduce(term = function_term => ActionFn(30);)
    //   "=" -> Reduce(term = function_term => ActionFn(30);)
    //   "|" -> Reduce(term = function_term => ActionFn(30);)
    //
    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 35
    //   constant = functor (*) ["!="]
    //   constant = functor (*) [")"]
    //   constant = functor (*) ["="]
    //   constant = functor (*) ["|"]
    //   plain_term = functor (*) "(" arguments ")" ["!="]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" ["="]
    //   plain_term = functor (*) "(" arguments ")" ["|"]
    //   constant = functor (*) [")"]
    //   constant = functor (*) ["="]
    //   constant = functor (*) ["|"]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" ["="]
    //   plain_term = functor (*) "(" arguments ")" ["|"]
    //   constant = functor (*) [")"]
    //   constant = functor (*) [","]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" [","]
    //   constant = functor (*) [")"]
    //   constant = functor (*) ["|"]
    //   plain_term = functor (*) "(" arguments ")" [")"]
    //   plain_term = functor (*) "(" arguments ")" ["|"]
    //
    //   "!=" -> Reduce(constant = functor => ActionFn(36);)
    //   "(" -> Shift(S56)
    //   ")" -> Reduce(constant = functor => ActionFn(36);)
    //   "," -> Reduce(constant = functor => ActionFn(36);)
    //   "=" -> Reduce(constant = functor => ActionFn(36);)
    //   "|" -> Reduce(constant = functor => ActionFn(36);)
    //
    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action36(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::constant(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 36
    //   number = integer (*) ["!="]
    //   number = integer (*) [")"]
    //   number = integer (*) ["="]
    //   number = integer (*) ["|"]
    //   number = integer (*) [")"]
    //   number = integer (*) ["="]
    //   number = integer (*) ["|"]
    //   number = integer (*) [")"]
    //   number = integer (*) [","]
    //   number = integer (*) [")"]
    //   number = integer (*) ["|"]
    //
    //   "!=" -> Reduce(number = integer => ActionFn(59);)
    //   ")" -> Reduce(number = integer => ActionFn(59);)
    //   "," -> Reduce(number = integer => ActionFn(59);)
    //   "=" -> Reduce(number = integer => ActionFn(59);)
    //   "|" -> Reduce(number = integer => ActionFn(59);)
    //
    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 37
    //   disjunction = literal (*) [")"]
    //   disjunction = literal (*) ["|"]
    //
    //   ")" -> Reduce(disjunction = literal => ActionFn(14);)
    //   "|" -> Reduce(disjunction = literal => ActionFn(14);)
    //
    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 38
    //   defined_atom = number (*) ["!="]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) ["="]
    //   defined_atom = number (*) ["|"]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) ["="]
    //   defined_atom = number (*) ["|"]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) [","]
    //   defined_atom = number (*) [")"]
    //   defined_atom = number (*) ["|"]
    //
    //   "!=" -> Reduce(defined_atom = number => ActionFn(40);)
    //   ")" -> Reduce(defined_atom = number => ActionFn(40);)
    //   "," -> Reduce(defined_atom = number => ActionFn(40);)
    //   "=" -> Reduce(defined_atom = number => ActionFn(40);)
    //   "|" -> Reduce(defined_atom = number => ActionFn(40);)
    //
    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__atom(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 39
    //   atomic_formula = plain_atomic_formula (*) [")"]
    //   atomic_formula = plain_atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(atomic_formula = plain_atomic_formula => ActionFn(20);)
    //   "|" -> Reduce(atomic_formula = plain_atomic_formula => ActionFn(20);)
    //
    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action20(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 40
    //   function_term = plain_term (*) ["!="]
    //   function_term = plain_term (*) ["="]
    //   plain_atomic_formula = plain_term (*) [")"]
    //   plain_atomic_formula = plain_term (*) ["|"]
    //   function_term = plain_term (*) ["="]
    //   plain_atomic_formula = plain_term (*) [")"]
    //   plain_atomic_formula = plain_term (*) ["|"]
    //
    //   "!=" -> Reduce(function_term = plain_term => ActionFn(32);)
    //   ")" -> Reduce(plain_atomic_formula = plain_term => ActionFn(22);)
    //   "=" -> Reduce(function_term = plain_term => ActionFn(32);)
    //   "|" -> Reduce(plain_atomic_formula = plain_term => ActionFn(22);)
    //
    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action22(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__atomic__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 41
    //   number = rational (*) ["!="]
    //   number = rational (*) [")"]
    //   number = rational (*) ["="]
    //   number = rational (*) ["|"]
    //   number = rational (*) [")"]
    //   number = rational (*) ["="]
    //   number = rational (*) ["|"]
    //   number = rational (*) [")"]
    //   number = rational (*) [","]
    //   number = rational (*) [")"]
    //   number = rational (*) ["|"]
    //
    //   "!=" -> Reduce(number = rational => ActionFn(60);)
    //   ")" -> Reduce(number = rational => ActionFn(60);)
    //   "," -> Reduce(number = rational => ActionFn(60);)
    //   "=" -> Reduce(number = rational => ActionFn(60);)
    //   "|" -> Reduce(number = rational => ActionFn(60);)
    //
    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action60(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 42
    //   number = real (*) ["!="]
    //   number = real (*) [")"]
    //   number = real (*) ["="]
    //   number = real (*) ["|"]
    //   number = real (*) [")"]
    //   number = real (*) ["="]
    //   number = real (*) ["|"]
    //   number = real (*) [")"]
    //   number = real (*) [","]
    //   number = real (*) [")"]
    //   number = real (*) ["|"]
    //
    //   "!=" -> Reduce(number = real => ActionFn(61);)
    //   ")" -> Reduce(number = real => ActionFn(61);)
    //   "," -> Reduce(number = real => ActionFn(61);)
    //   "=" -> Reduce(number = real => ActionFn(61);)
    //   "|" -> Reduce(number = real => ActionFn(61);)
    //
    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action61(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::number(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 43
    //   defined_infix_formula = term (*) defined_infix_pred term [")"]
    //   defined_infix_formula = term (*) defined_infix_pred term ["|"]
    //   defined_infix_pred = (*) infix_equality [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   defined_infix_pred = (*) infix_equality [r#"[a-z][a-zA-Z0-9_]*"#]
    //   fol_infix_unary = term (*) infix_inequality term [")"]
    //   fol_infix_unary = term (*) infix_inequality term ["|"]
    //   infix_equality = (*) "=" [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_equality = (*) "=" [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_equality = (*) "=" [r#"[a-z][a-zA-Z0-9_]*"#]
    //   infix_inequality = (*) "!=" [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_inequality = (*) "!=" [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_inequality = (*) "!=" [r#"[+-]?[0-9]+"#]
    //   infix_inequality = (*) "!=" [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_inequality = (*) "!=" [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_inequality = (*) "!=" [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_inequality = (*) "!=" [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_inequality = (*) "!=" [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   "!=" -> Shift(S60)
    //   "=" -> Shift(S61)
    //
    //   defined_infix_pred -> S57
    //   infix_equality -> S58
    //   infix_inequality -> S59
    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::infix__inequality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 44
    //   variable = upper_word (*) ["!="]
    //   variable = upper_word (*) ["="]
    //   variable = upper_word (*) ["="]
    //   variable = upper_word (*) [")"]
    //   variable = upper_word (*) [","]
    //   variable = upper_word (*) [")"]
    //   variable = upper_word (*) ["|"]
    //
    //   "!=" -> Reduce(variable = upper_word => ActionFn(47);)
    //   ")" -> Reduce(variable = upper_word => ActionFn(47);)
    //   "," -> Reduce(variable = upper_word => ActionFn(47);)
    //   "=" -> Reduce(variable = upper_word => ActionFn(47);)
    //   "|" -> Reduce(variable = upper_word => ActionFn(47);)
    //
    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action47(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::variable(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 45
    //   term = variable (*) ["!="]
    //   term = variable (*) ["="]
    //   term = variable (*) ["="]
    //   term = variable (*) [")"]
    //   term = variable (*) [","]
    //   term = variable (*) [")"]
    //   term = variable (*) ["|"]
    //
    //   "!=" -> Reduce(term = variable => ActionFn(31);)
    //   ")" -> Reduce(term = variable => ActionFn(31);)
    //   "," -> Reduce(term = variable => ActionFn(31);)
    //   "=" -> Reduce(term = variable => ActionFn(31);)
    //   "|" -> Reduce(term = variable => ActionFn(31);)
    //
    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 46
    //   atomic_defined_word = (*) dollar_word ["!="]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["!="]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["!="]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   cnf_formula = "(" (*) disjunction ")" [")"]
    //   constant = (*) functor ["!="]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object ["!="]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number ["!="]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term ["!="]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor ["!="]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["!="]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant ["!="]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["!="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom ["!="]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term ["!="]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   disjunction = (*) disjunction "|" literal [")"]
    //   disjunction = (*) disjunction "|" literal ["|"]
    //   disjunction = (*) literal [")"]
    //   disjunction = (*) literal ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["!="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["!="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = (*) term infix_inequality term [")"]
    //   fol_infix_unary = (*) term infix_inequality term ["|"]
    //   function_term = (*) defined_term ["!="]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["!="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["!="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["!="]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = (*) atomic_formula [")"]
    //   literal = (*) atomic_formula ["|"]
    //   literal = (*) fol_infix_unary [")"]
    //   literal = (*) fol_infix_unary ["|"]
    //   literal = (*) "~" atomic_formula [")"]
    //   literal = (*) "~" atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["!="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer ["!="]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational ["!="]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real ["!="]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant ["!="]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" ["!="]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["!="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["!="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["!="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["!="]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["!="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["!="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["!="]
    //   variable = (*) upper_word ["="]
    //
    //   "~" -> Shift(S47)
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   atomic_defined_word -> S16
    //   atomic_formula -> S17
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_formula -> S22
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_infix_formula -> S26
    //   defined_plain_formula -> S27
    //   defined_plain_term -> S28
    //   defined_term -> S29
    //   disjunction -> S62
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   fol_infix_unary -> S33
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   literal -> S37
    //   lower_word -> S6
    //   number -> S38
    //   plain_atomic_formula -> S39
    //   plain_term -> S40
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S43
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::disjunction(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 47
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = "~" (*) atomic_formula [")"]
    //   literal = "~" (*) atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["="]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   atomic_defined_word -> S16
    //   atomic_formula -> S63
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_formula -> S22
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_infix_formula -> S26
    //   defined_plain_formula -> S27
    //   defined_plain_term -> S28
    //   defined_term -> S29
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   lower_word -> S6
    //   number -> S38
    //   plain_atomic_formula -> S39
    //   plain_term -> S40
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S64
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::number(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::real(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 48
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["!="]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["="]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [","]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["("]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [")"]
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "!=" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "(" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   ")" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "," -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "=" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //   "|" -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //
    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 49
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["!="]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["="]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["|"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["="]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["|"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [","]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) [")"]
    //   real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# (*) ["|"]
    //
    //   "!=" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   ")" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   "," -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   "=" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //   "|" -> Reduce(real = r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# => ActionFn(68);)
    //
    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action68(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::real(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 50
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["!="]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["="]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["|"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["="]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["|"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [","]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) [")"]
    //   rational = r#"[+-]?[0-9]+[/][0-9]+"# (*) ["|"]
    //
    //   "!=" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   ")" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   "," -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   "=" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //   "|" -> Reduce(rational = r#"[+-]?[0-9]+[/][0-9]+"# => ActionFn(69);)
    //
    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action69(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::rational(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 51
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["!="]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["="]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["="]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) [")"]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) [","]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) [")"]
    //   upper_word = r#"[A-Z][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "!=" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   ")" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   "," -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   "=" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //   "|" -> Reduce(upper_word = r#"[A-Z][a-zA-Z0-9_]*"# => ActionFn(66);)
    //
    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action66(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::upper__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 52
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["!="]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["="]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["|"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["="]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["|"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [","]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [")"]
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) ["|"]
    //
    //   "!=" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   ")" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   "," -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   "=" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //   "|" -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //
    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action64(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 53
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" (*) "." [EOF]
    //
    //   "." -> Shift(S65)
    //
    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 54
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["!="]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["="]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["="]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" [")"]
    //   defined_plain_term = defined_functor "(" (*) arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   arguments -> S66
    //   atomic_defined_word -> S16
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_plain_term -> S28
    //   defined_term -> S67
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   lower_word -> S6
    //   number -> S38
    //   plain_term -> S68
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S69
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 55
    //   atomic_defined_word = (*) dollar_word ["!="]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["="]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_formula = (*) defined_atomic_formula [")"]
    //   atomic_formula = (*) defined_atomic_formula ["|"]
    //   atomic_formula = (*) plain_atomic_formula [")"]
    //   atomic_formula = (*) plain_atomic_formula ["|"]
    //   atomic_word = (*) lower_word ["!="]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["="]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["!="]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["="]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor ["!="]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["="]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object ["!="]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["="]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number ["!="]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["="]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_formula = (*) defined_infix_formula [")"]
    //   defined_atomic_formula = (*) defined_infix_formula ["|"]
    //   defined_atomic_formula = (*) defined_plain_formula [")"]
    //   defined_atomic_formula = (*) defined_plain_formula ["|"]
    //   defined_atomic_term = (*) defined_plain_term ["!="]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["="]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor ["!="]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["="]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["!="]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["="]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = (*) term defined_infix_pred term [")"]
    //   defined_infix_formula = (*) term defined_infix_pred term ["|"]
    //   defined_plain_formula = (*) defined_term [")"]
    //   defined_plain_formula = (*) defined_term ["|"]
    //   defined_plain_term = (*) defined_constant ["!="]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["="]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["!="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["="]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom ["!="]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["="]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term ["!="]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["="]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   disjunction = disjunction "|" (*) literal [")"]
    //   disjunction = disjunction "|" (*) literal ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["!="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["="]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["!="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["="]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = (*) term infix_inequality term [")"]
    //   fol_infix_unary = (*) term infix_inequality term ["|"]
    //   function_term = (*) defined_term ["!="]
    //   function_term = (*) defined_term ["="]
    //   function_term = (*) plain_term ["!="]
    //   function_term = (*) plain_term ["="]
    //   functor = (*) atomic_word ["!="]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["="]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["!="]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["="]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   literal = (*) atomic_formula [")"]
    //   literal = (*) atomic_formula ["|"]
    //   literal = (*) fol_infix_unary [")"]
    //   literal = (*) fol_infix_unary ["|"]
    //   literal = (*) "~" atomic_formula [")"]
    //   literal = (*) "~" atomic_formula ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["!="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["="]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer ["!="]
    //   number = (*) integer [")"]
    //   number = (*) integer ["="]
    //   number = (*) integer ["|"]
    //   number = (*) rational ["!="]
    //   number = (*) rational [")"]
    //   number = (*) rational ["="]
    //   number = (*) rational ["|"]
    //   number = (*) real ["!="]
    //   number = (*) real [")"]
    //   number = (*) real ["="]
    //   number = (*) real ["|"]
    //   plain_atomic_formula = (*) plain_term [")"]
    //   plain_atomic_formula = (*) plain_term ["|"]
    //   plain_term = (*) constant ["!="]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["="]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" ["!="]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["="]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["!="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["="]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["!="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["="]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["!="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["="]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term ["!="]
    //   term = (*) function_term ["="]
    //   term = (*) variable ["!="]
    //   term = (*) variable ["="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["!="]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["="]
    //   variable = (*) upper_word ["!="]
    //   variable = (*) upper_word ["="]
    //
    //   "~" -> Shift(S47)
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   atomic_defined_word -> S16
    //   atomic_formula -> S17
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_formula -> S22
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_infix_formula -> S26
    //   defined_plain_formula -> S27
    //   defined_plain_term -> S28
    //   defined_term -> S29
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   fol_infix_unary -> S33
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   literal -> S70
    //   lower_word -> S6
    //   number -> S38
    //   plain_atomic_formula -> S39
    //   plain_term -> S40
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S43
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__infix__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::fol__infix__unary(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__atomic__formula(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state43(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 56
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" ["!="]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" ["="]
    //   plain_term = functor "(" (*) arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" ["="]
    //   plain_term = functor "(" (*) arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   plain_term = functor "(" (*) arguments ")" [")"]
    //   plain_term = functor "(" (*) arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   arguments -> S71
    //   atomic_defined_word -> S16
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_plain_term -> S28
    //   defined_term -> S67
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   lower_word -> S6
    //   number -> S38
    //   plain_term -> S68
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S69
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 57
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_infix_formula = term defined_infix_pred (*) term [")"]
    //   defined_infix_formula = term defined_infix_pred (*) term ["|"]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term ["|"]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term ["|"]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer [")"]
    //   number = (*) integer ["|"]
    //   number = (*) rational [")"]
    //   number = (*) rational ["|"]
    //   number = (*) real [")"]
    //   number = (*) real ["|"]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term [")"]
    //   term = (*) function_term ["|"]
    //   term = (*) variable [")"]
    //   term = (*) variable ["|"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["|"]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word ["|"]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   atomic_defined_word -> S16
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_plain_term -> S28
    //   defined_term -> S67
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   lower_word -> S6
    //   number -> S38
    //   plain_term -> S68
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S72
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state72(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 58
    //   defined_infix_pred = infix_equality (*) [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = infix_equality (*) [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   defined_infix_pred = infix_equality (*) [r#"[+-]?[0-9]+"#]
    //   defined_infix_pred = infix_equality (*) [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   defined_infix_pred = infix_equality (*) [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   defined_infix_pred = infix_equality (*) [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = infix_equality (*) [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   defined_infix_pred = infix_equality (*) [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[+-]?[0-9]+"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Reduce(defined_infix_pred = infix_equality => ActionFn(27);)
    //
    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action27(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__pred(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 59
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word ["|"]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word ["|"]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted ["|"]
    //   constant = (*) functor [")"]
    //   constant = (*) functor ["|"]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object ["|"]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number ["|"]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term ["|"]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor ["|"]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word ["|"]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant ["|"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" ["|"]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom ["|"]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term ["|"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# ["|"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["|"]
    //   fol_infix_unary = term infix_inequality (*) term [")"]
    //   fol_infix_unary = term infix_inequality (*) term ["|"]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term ["|"]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term ["|"]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word ["|"]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# ["|"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["|"]
    //   number = (*) integer [")"]
    //   number = (*) integer ["|"]
    //   number = (*) rational [")"]
    //   number = (*) rational ["|"]
    //   number = (*) real [")"]
    //   number = (*) real ["|"]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant ["|"]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" ["|"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# ["|"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# ["|"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["|"]
    //   term = (*) function_term [")"]
    //   term = (*) function_term ["|"]
    //   term = (*) variable [")"]
    //   term = (*) variable ["|"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# ["|"]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word ["|"]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   atomic_defined_word -> S16
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_plain_term -> S28
    //   defined_term -> S67
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   lower_word -> S6
    //   number -> S38
    //   plain_term -> S68
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S73
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state73(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 60
    //   infix_inequality = "!=" (*) [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_inequality = "!=" (*) [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_inequality = "!=" (*) [r#"[+-]?[0-9]+"#]
    //   infix_inequality = "!=" (*) [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_inequality = "!=" (*) [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_inequality = "!=" (*) [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_inequality = "!=" (*) [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_inequality = "!=" (*) [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[+-]?[0-9]+"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Reduce(infix_inequality = "!=" => ActionFn(29);)
    //
    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__inequality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 61
    //   infix_equality = "=" (*) [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = "=" (*) [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_equality = "=" (*) [r#"[+-]?[0-9]+"#]
    //   infix_equality = "=" (*) [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_equality = "=" (*) [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_equality = "=" (*) [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_equality = "=" (*) [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_equality = "=" (*) [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[+-]?[0-9]+"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Reduce(infix_equality = "=" => ActionFn(28);)
    //
    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (14, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (17, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::infix__equality(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 62
    //   cnf_formula = "(" disjunction (*) ")" [")"]
    //   disjunction = disjunction (*) "|" literal [")"]
    //   disjunction = disjunction (*) "|" literal ["|"]
    //
    //   ")" -> Shift(S74)
    //   "|" -> Shift(S55)
    //
    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 63
    //   literal = "~" atomic_formula (*) [")"]
    //   literal = "~" atomic_formula (*) ["|"]
    //
    //   ")" -> Reduce(literal = "~", atomic_formula => ActionFn(17);)
    //   "|" -> Reduce(literal = "~", atomic_formula => ActionFn(17);)
    //
    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action17(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 64
    //   defined_infix_formula = term (*) defined_infix_pred term [")"]
    //   defined_infix_formula = term (*) defined_infix_pred term ["|"]
    //   defined_infix_pred = (*) infix_equality [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   defined_infix_pred = (*) infix_equality [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   defined_infix_pred = (*) infix_equality [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   defined_infix_pred = (*) infix_equality [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   defined_infix_pred = (*) infix_equality [r#"[a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[$][a-z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\']([^\']|[\\\\][\'\\\\])+[\']"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"#]
    //   infix_equality = (*) "=" [r#"[+-]?[0-9]+[/][0-9]+"#]
    //   infix_equality = (*) "=" [r#"[A-Z][a-zA-Z0-9_]*"#]
    //   infix_equality = (*) "=" [r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"#]
    //   infix_equality = (*) "=" [r#"[a-z][a-zA-Z0-9_]*"#]
    //
    //   "=" -> Shift(S61)
    //
    //   defined_infix_pred -> S57
    //   infix_equality -> S58
    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::defined__infix__pred(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::infix__equality(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 65
    //   cnf_annotated = "cnf" "(" name "," formula_role "," cnf_formula ")" "." (*) [EOF]
    //
    //   EOF -> Reduce(cnf_annotated = "cnf", "(", name, ",", formula_role, ",", cnf_formula, ")", "." => ActionFn(10);)
    //
    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<String>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Formula>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __nt = super::__action10(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__annotated(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 66
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["!="]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["="]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["|"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["="]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["|"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [","]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" [")"]
    //   defined_plain_term = defined_functor "(" arguments (*) ")" ["|"]
    //
    //   ")" -> Shift(S75)
    //
    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 67
    //   function_term = defined_term (*) [")"]
    //   function_term = defined_term (*) [","]
    //   function_term = defined_term (*) [")"]
    //   function_term = defined_term (*) ["|"]
    //
    //   ")" -> Reduce(function_term = defined_term => ActionFn(33);)
    //   "," -> Reduce(function_term = defined_term => ActionFn(33);)
    //   "|" -> Reduce(function_term = defined_term => ActionFn(33);)
    //
    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 68
    //   function_term = plain_term (*) [")"]
    //   function_term = plain_term (*) [","]
    //   function_term = plain_term (*) [")"]
    //   function_term = plain_term (*) ["|"]
    //
    //   ")" -> Reduce(function_term = plain_term => ActionFn(32);)
    //   "," -> Reduce(function_term = plain_term => ActionFn(32);)
    //   "|" -> Reduce(function_term = plain_term => ActionFn(32);)
    //
    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::function__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 69
    //   arguments = term (*) [")"]
    //   arguments = term (*) "," arguments [")"]
    //
    //   ")" -> Reduce(arguments = term => ActionFn(48);)
    //   "," -> Shift(S76)
    //
    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 70
    //   disjunction = disjunction "|" literal (*) [")"]
    //   disjunction = disjunction "|" literal (*) ["|"]
    //
    //   ")" -> Reduce(disjunction = disjunction, "|", literal => ActionFn(15);)
    //   "|" -> Reduce(disjunction = disjunction, "|", literal => ActionFn(15);)
    //
    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Formula>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Formula>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action15(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::disjunction(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 71
    //   plain_term = functor "(" arguments (*) ")" ["!="]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" ["="]
    //   plain_term = functor "(" arguments (*) ")" ["|"]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" ["="]
    //   plain_term = functor "(" arguments (*) ")" ["|"]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" [","]
    //   plain_term = functor "(" arguments (*) ")" [")"]
    //   plain_term = functor "(" arguments (*) ")" ["|"]
    //
    //   ")" -> Shift(S77)
    //
    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 72
    //   defined_infix_formula = term defined_infix_pred term (*) [")"]
    //   defined_infix_formula = term defined_infix_pred term (*) ["|"]
    //
    //   ")" -> Reduce(defined_infix_formula = term, defined_infix_pred, term => ActionFn(26);)
    //   "|" -> Reduce(defined_infix_formula = term, defined_infix_pred, term => ActionFn(26);)
    //
    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action26(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__infix__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 73
    //   fol_infix_unary = term infix_inequality term (*) [")"]
    //   fol_infix_unary = term infix_inequality term (*) ["|"]
    //
    //   ")" -> Reduce(fol_infix_unary = term, infix_inequality, term => ActionFn(19);)
    //   "|" -> Reduce(fol_infix_unary = term, infix_inequality, term => ActionFn(19);)
    //
    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::fol__infix__unary(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 74
    //   cnf_formula = "(" disjunction ")" (*) [")"]
    //
    //   ")" -> Reduce(cnf_formula = "(", disjunction, ")" => ActionFn(12);)
    //
    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Formula>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action12(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::cnf__formula(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 75
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["!="]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["="]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["|"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["="]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["|"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [","]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) [")"]
    //   defined_plain_term = defined_functor "(" arguments ")" (*) ["|"]
    //
    //   "!=" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   ")" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   "," -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   "=" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //   "|" -> Reduce(defined_plain_term = defined_functor, "(", arguments, ")" => ActionFn(44);)
    //
    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::defined__plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 76
    //   arguments = (*) term [")"]
    //   arguments = (*) term "," arguments [")"]
    //   arguments = term "," (*) arguments [")"]
    //   atomic_defined_word = (*) dollar_word ["("]
    //   atomic_defined_word = (*) dollar_word [")"]
    //   atomic_defined_word = (*) dollar_word [","]
    //   atomic_word = (*) lower_word ["("]
    //   atomic_word = (*) lower_word [")"]
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) single_quoted ["("]
    //   atomic_word = (*) single_quoted [")"]
    //   atomic_word = (*) single_quoted [","]
    //   constant = (*) functor [")"]
    //   constant = (*) functor [","]
    //   defined_atom = (*) distinct_object [")"]
    //   defined_atom = (*) distinct_object [","]
    //   defined_atom = (*) number [")"]
    //   defined_atom = (*) number [","]
    //   defined_atomic_term = (*) defined_plain_term [")"]
    //   defined_atomic_term = (*) defined_plain_term [","]
    //   defined_constant = (*) defined_functor [")"]
    //   defined_constant = (*) defined_functor [","]
    //   defined_functor = (*) atomic_defined_word ["("]
    //   defined_functor = (*) atomic_defined_word [")"]
    //   defined_functor = (*) atomic_defined_word [","]
    //   defined_plain_term = (*) defined_constant [")"]
    //   defined_plain_term = (*) defined_constant [","]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [")"]
    //   defined_plain_term = (*) defined_functor "(" arguments ")" [","]
    //   defined_term = (*) defined_atom [")"]
    //   defined_term = (*) defined_atom [","]
    //   defined_term = (*) defined_atomic_term [")"]
    //   defined_term = (*) defined_atomic_term [","]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [")"]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [","]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# ["("]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [")"]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [","]
    //   function_term = (*) defined_term [")"]
    //   function_term = (*) defined_term [","]
    //   function_term = (*) plain_term [")"]
    //   function_term = (*) plain_term [","]
    //   functor = (*) atomic_word ["("]
    //   functor = (*) atomic_word [")"]
    //   functor = (*) atomic_word [","]
    //   integer = (*) r#"[+-]?[0-9]+"# [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["("]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [")"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   number = (*) integer [")"]
    //   number = (*) integer [","]
    //   number = (*) rational [")"]
    //   number = (*) rational [","]
    //   number = (*) real [")"]
    //   number = (*) real [","]
    //   plain_term = (*) constant [")"]
    //   plain_term = (*) constant [","]
    //   plain_term = (*) functor "(" arguments ")" [")"]
    //   plain_term = (*) functor "(" arguments ")" [","]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [")"]
    //   rational = (*) r#"[+-]?[0-9]+[/][0-9]+"# [","]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [")"]
    //   real = (*) r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["("]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   term = (*) function_term [")"]
    //   term = (*) function_term [","]
    //   term = (*) variable [")"]
    //   term = (*) variable [","]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [")"]
    //   upper_word = (*) r#"[A-Z][a-zA-Z0-9_]*"# [","]
    //   variable = (*) upper_word [")"]
    //   variable = (*) upper_word [","]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S48)
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S9)
    //   r#"[+-]?[0-9]+"# -> Shift(S10)
    //   r#"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"# -> Shift(S49)
    //   r#"[+-]?[0-9]+[/][0-9]+"# -> Shift(S50)
    //   r#"[A-Z][a-zA-Z0-9_]*"# -> Shift(S51)
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S52)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S11)
    //
    //   arguments -> S78
    //   atomic_defined_word -> S16
    //   atomic_word -> S18
    //   constant -> S20
    //   defined_atom -> S21
    //   defined_atomic_term -> S23
    //   defined_constant -> S24
    //   defined_functor -> S25
    //   defined_plain_term -> S28
    //   defined_term -> S67
    //   distinct_object -> S31
    //   dollar_word -> S32
    //   function_term -> S34
    //   functor -> S35
    //   integer -> S36
    //   lower_word -> S6
    //   number -> S38
    //   plain_term -> S68
    //   rational -> S41
    //   real -> S42
    //   single_quoted -> S8
    //   term -> S69
    //   upper_word -> S44
    //   variable -> S45
    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state49(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state51(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::arguments(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::atomic__defined__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atom(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state21(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__atomic__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__constant(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::defined__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::distinct__object(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::dollar__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::function__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::functor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::number(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::plain__term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::rational(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state41(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::real(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::term(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::upper__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::variable(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state45(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 77
    //   plain_term = functor "(" arguments ")" (*) ["!="]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) ["="]
    //   plain_term = functor "(" arguments ")" (*) ["|"]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) ["="]
    //   plain_term = functor "(" arguments ")" (*) ["|"]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) [","]
    //   plain_term = functor "(" arguments ")" (*) [")"]
    //   plain_term = functor "(" arguments ")" (*) ["|"]
    //
    //   "!=" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   ")" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   "," -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   "=" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //   "|" -> Reduce(plain_term = functor, "(", arguments, ")" => ActionFn(35);)
    //
    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (10, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::plain__term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 78
    //   arguments = term "," arguments (*) [")"]
    //
    //   ")" -> Reduce(arguments = term, ",", arguments => ActionFn(49);)
    //
    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<Term>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::arguments(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__cnf_annotated::parse_cnf_annotated;

mod __parse__distinct_object {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use parser::tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_distinct_object<
        'input,
    >(
        input: &'input str,
    ) -> Result<String, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____distinct__object(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fol__infix__unary(Formula),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        upper__word(String),
        variable(String),
    }

    // State 0
    //   __distinct_object = (*) distinct_object [EOF]
    //   distinct_object = (*) r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# [EOF]
    //
    //   r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# -> Shift(S2)
    //
    //   distinct_object -> S1
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::distinct__object(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __distinct_object = distinct_object (*) [EOF]
    //
    //   EOF -> Reduce(__distinct_object = distinct_object => ActionFn(4);)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action4(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# (*) [EOF]
    //
    //   EOF -> Reduce(distinct_object = r#"[\\\"]([^\"]|[\\][\"\\])+[\\\"]"# => ActionFn(64);)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action64(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::distinct__object(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__distinct_object::parse_distinct_object;

mod __parse__dollar_word {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use parser::tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_dollar_word<
        'input,
    >(
        input: &'input str,
    ) -> Result<String, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____dollar__word(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fol__infix__unary(Formula),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        upper__word(String),
        variable(String),
    }

    // State 0
    //   __dollar_word = (*) dollar_word [EOF]
    //   dollar_word = (*) r#"[$][a-z][a-zA-Z0-9_]*"# [EOF]
    //
    //   r#"[$][a-z][a-zA-Z0-9_]*"# -> Shift(S2)
    //
    //   dollar_word -> S1
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::dollar__word(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __dollar_word = dollar_word (*) [EOF]
    //
    //   EOF -> Reduce(__dollar_word = dollar_word => ActionFn(5);)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action5(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# (*) [EOF]
    //
    //   EOF -> Reduce(dollar_word = r#"[$][a-z][a-zA-Z0-9_]*"# => ActionFn(65);)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action65(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::dollar__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__dollar_word::parse_dollar_word;

mod __parse__include {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use parser::tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_include<
        'input,
    >(
        input: &'input str,
    ) -> Result<Include, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____include(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fol__infix__unary(Formula),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        upper__word(String),
        variable(String),
    }

    // State 0
    //   __include = (*) include [EOF]
    //   include = (*) "include" "(" file_name formula_selection ")" "." [EOF]
    //   include = (*) "include" "(" file_name ")" "." [EOF]
    //
    //   "include" -> Shift(S2)
    //
    //   include -> S1
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::include(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __include = include (*) [EOF]
    //
    //   EOF -> Reduce(__include = include => ActionFn(2);)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Include>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action2(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   include = "include" (*) "(" file_name formula_selection ")" "." [EOF]
    //   include = "include" (*) "(" file_name ")" "." [EOF]
    //
    //   "(" -> Shift(S3)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 3
    //   file_name = (*) single_quoted [")"]
    //   file_name = (*) single_quoted [","]
    //   include = "include" "(" (*) file_name formula_selection ")" "." [EOF]
    //   include = "include" "(" (*) file_name ")" "." [EOF]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [")"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S6)
    //
    //   file_name -> S4
    //   single_quoted -> S5
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::file__name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 4
    //   formula_selection = (*) "," "[" name_list "]" [")"]
    //   include = "include" "(" file_name (*) formula_selection ")" "." [EOF]
    //   include = "include" "(" file_name (*) ")" "." [EOF]
    //
    //   ")" -> Shift(S8)
    //   "," -> Shift(S9)
    //
    //   formula_selection -> S7
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state8(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::formula__selection(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 5
    //   file_name = single_quoted (*) [")"]
    //   file_name = single_quoted (*) [","]
    //
    //   ")" -> Reduce(file_name = single_quoted => ActionFn(62);)
    //   "," -> Reduce(file_name = single_quoted => ActionFn(62);)
    //
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action62(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::file__name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 6
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [")"]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [","]
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) ["]"]
    //
    //   ")" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "," -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //   "]" -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 7
    //   include = "include" "(" file_name formula_selection (*) ")" "." [EOF]
    //
    //   ")" -> Shift(S10)
    //
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 8
    //   include = "include" "(" file_name ")" (*) "." [EOF]
    //
    //   "." -> Shift(S11)
    //
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 9
    //   formula_selection = "," (*) "[" name_list "]" [")"]
    //
    //   "[" -> Shift(S12)
    //
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 10
    //   include = "include" "(" file_name formula_selection ")" (*) "." [EOF]
    //
    //   "." -> Shift(S13)
    //
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 11
    //   include = "include" "(" file_name ")" "." (*) [EOF]
    //
    //   EOF -> Reduce(include = "include", "(", file_name, ")", "." => ActionFn(80);)
    //
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action80(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 12
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) lower_word ["]"]
    //   atomic_word = (*) single_quoted [","]
    //   atomic_word = (*) single_quoted ["]"]
    //   formula_selection = "," "[" (*) name_list "]" [")"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   integer = (*) r#"[+-]?[0-9]+"# ["]"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["]"]
    //   name = (*) atomic_word [","]
    //   name = (*) atomic_word ["]"]
    //   name = (*) integer [","]
    //   name = (*) integer ["]"]
    //   name_list = (*) name ["]"]
    //   name_list = (*) name "," name_list ["]"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["]"]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S6)
    //   r#"[+-]?[0-9]+"# -> Shift(S20)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S21)
    //
    //   atomic_word -> S14
    //   integer -> S15
    //   lower_word -> S16
    //   name -> S17
    //   name_list -> S18
    //   single_quoted -> S19
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 13
    //   include = "include" "(" file_name formula_selection ")" "." (*) [EOF]
    //
    //   EOF -> Reduce(include = "include", "(", file_name, formula_selection, ")", "." => ActionFn(79);)
    //
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<String>,
        __sym3: &mut Option<Vec<String>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::include(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 14
    //   name = atomic_word (*) [","]
    //   name = atomic_word (*) ["]"]
    //
    //   "," -> Reduce(name = atomic_word => ActionFn(54);)
    //   "]" -> Reduce(name = atomic_word => ActionFn(54);)
    //
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action54(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 15
    //   name = integer (*) [","]
    //   name = integer (*) ["]"]
    //
    //   "," -> Reduce(name = integer => ActionFn(55);)
    //   "]" -> Reduce(name = integer => ActionFn(55);)
    //
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action55(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 16
    //   atomic_word = lower_word (*) [","]
    //   atomic_word = lower_word (*) ["]"]
    //
    //   "," -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //   "]" -> Reduce(atomic_word = lower_word => ActionFn(56);)
    //
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action56(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 17
    //   name_list = name (*) ["]"]
    //   name_list = name (*) "," name_list ["]"]
    //
    //   "," -> Shift(S22)
    //   "]" -> Reduce(name_list = name => ActionFn(52);)
    //
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action52(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 18
    //   formula_selection = "," "[" name_list (*) "]" [")"]
    //
    //   "]" -> Shift(S23)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 19
    //   atomic_word = single_quoted (*) [","]
    //   atomic_word = single_quoted (*) ["]"]
    //
    //   "," -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //   "]" -> Reduce(atomic_word = single_quoted => ActionFn(57);)
    //
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action57(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::atomic__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 20
    //   integer = r#"[+-]?[0-9]+"# (*) [","]
    //   integer = r#"[+-]?[0-9]+"# (*) ["]"]
    //
    //   "," -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //   "]" -> Reduce(integer = r#"[+-]?[0-9]+"# => ActionFn(70);)
    //
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action70(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::integer(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 21
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) [","]
    //   lower_word = r#"[a-z][a-zA-Z0-9_]*"# (*) ["]"]
    //
    //   "," -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //   "]" -> Reduce(lower_word = r#"[a-z][a-zA-Z0-9_]*"# => ActionFn(67);)
    //
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, _), _)) |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action67(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::lower__word(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 22
    //   atomic_word = (*) lower_word [","]
    //   atomic_word = (*) lower_word ["]"]
    //   atomic_word = (*) single_quoted [","]
    //   atomic_word = (*) single_quoted ["]"]
    //   integer = (*) r#"[+-]?[0-9]+"# [","]
    //   integer = (*) r#"[+-]?[0-9]+"# ["]"]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# [","]
    //   lower_word = (*) r#"[a-z][a-zA-Z0-9_]*"# ["]"]
    //   name = (*) atomic_word [","]
    //   name = (*) atomic_word ["]"]
    //   name = (*) integer [","]
    //   name = (*) integer ["]"]
    //   name_list = (*) name ["]"]
    //   name_list = (*) name "," name_list ["]"]
    //   name_list = name "," (*) name_list ["]"]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [","]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# ["]"]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S6)
    //   r#"[+-]?[0-9]+"# -> Shift(S20)
    //   r#"[a-z][a-zA-Z0-9_]*"# -> Shift(S21)
    //
    //   atomic_word -> S14
    //   integer -> S15
    //   lower_word -> S16
    //   name -> S17
    //   name_list -> S24
    //   single_quoted -> S19
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::atomic__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::integer(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::lower__word(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::name__list(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::single__quoted(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 23
    //   formula_selection = "," "[" name_list "]" (*) [")"]
    //
    //   ")" -> Reduce(formula_selection = ",", "[", name_list, "]" => ActionFn(51);)
    //
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action51(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::formula__selection(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 24
    //   name_list = name "," name_list (*) ["]"]
    //
    //   "]" -> Reduce(name_list = name, ",", name_list => ActionFn(53);)
    //
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Vec<String>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action53(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::name__list(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__include::parse_include;

mod __parse__single_quoted {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use parser::tptp_parser::ast::*;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_single_quoted<
        'input,
    >(
        input: &'input str,
    ) -> Result<String, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____single__quoted(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        TPTP__file(Vec<TptpInput>),
        TPTP__input(TptpInput),
        TPTP__input_2a(::std::vec::Vec<TptpInput>),
        TPTP__input_2b(::std::vec::Vec<TptpInput>),
        ____TPTP__file(Vec<TptpInput>),
        ____cnf__annotated(CnfAnnotated),
        ____distinct__object(String),
        ____dollar__word(String),
        ____include(Include),
        ____single__quoted(String),
        annotated__formula(AnnotatedFormula),
        arguments(Vec<Term>),
        atomic__defined__word(String),
        atomic__formula(Formula),
        atomic__word(String),
        cnf__annotated(CnfAnnotated),
        cnf__formula(Formula),
        constant(String),
        defined__atom(Term),
        defined__atomic__formula(Formula),
        defined__atomic__term(Term),
        defined__constant(String),
        defined__functor(String),
        defined__infix__formula(Formula),
        defined__infix__pred(String),
        defined__plain__formula(Formula),
        defined__plain__term(Term),
        defined__term(Term),
        disjunction(Formula),
        distinct__object(String),
        dollar__word(String),
        file__name(String),
        fol__infix__unary(Formula),
        formula__role(String),
        formula__selection(Vec<String>),
        formula__selection_3f(::std::option::Option<Vec<String>>),
        function__term(Term),
        functor(String),
        include(Include),
        infix__equality(String),
        infix__inequality(String),
        integer(String),
        literal(Formula),
        lower__word(String),
        name(String),
        name__list(Vec<String>),
        number(String),
        plain__atomic__formula(Formula),
        plain__term(Term),
        rational(String),
        real(String),
        single__quoted(String),
        term(Term),
        upper__word(String),
        variable(String),
    }

    // State 0
    //   __single_quoted = (*) single_quoted [EOF]
    //   single_quoted = (*) r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# [EOF]
    //
    //   r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# -> Shift(S2)
    //
    //   single_quoted -> S1
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::single__quoted(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __single_quoted = single_quoted (*) [EOF]
    //
    //   EOF -> Reduce(__single_quoted = single_quoted => ActionFn(3);)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# (*) [EOF]
    //
    //   EOF -> Reduce(single_quoted = r#"[\']([^\']|[\\\\][\'\\\\])+[\']"# => ActionFn(63);)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action63(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::single__quoted(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__single_quoted::parse_single_quoted;
mod __intern_token {
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub struct __Matcher<'input> {
        text: &'input str,
        consumed: usize,
    }

    fn __tokenize(text: &str) -> Option<(usize, usize)> {
        let mut __chars = text.char_indices();
        let mut __current_match: Option<(usize, usize)> = None;
        let mut __current_state: usize = 0;
        loop {
            match __current_state {
                0 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '!' => {
                            __current_state = 1;
                            continue;
                        }
                        '\"' => {
                            __current_state = 2;
                            continue;
                        }
                        '$' => {
                            __current_state = 3;
                            continue;
                        }
                        '\'' => {
                            __current_state = 4;
                            continue;
                        }
                        '(' => {
                            __current_match = Some((1, __index + 1));
                            __current_state = 5;
                            continue;
                        }
                        ')' => {
                            __current_match = Some((2, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '+' => {
                            __current_state = 7;
                            continue;
                        }
                        ',' => {
                            __current_match = Some((3, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '-' => {
                            __current_state = 7;
                            continue;
                        }
                        '.' => {
                            __current_match = Some((4, __index + 1));
                            __current_state = 9;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '=' => {
                            __current_match = Some((5, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '[' => {
                            __current_match = Some((6, __index + 1));
                            __current_state = 13;
                            continue;
                        }
                        '\\' => {
                            __current_state = 2;
                            continue;
                        }
                        ']' => {
                            __current_match = Some((7, __index + 1));
                            __current_state = 14;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 17;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '|' => {
                            __current_match = Some((10, __index + 1));
                            __current_state = 18;
                            continue;
                        }
                        '~' => {
                            __current_match = Some((11, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                1 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '=' => {
                            __current_match = Some((0, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                2 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            return __current_match;
                        }
                        '\\' => {
                            __current_state = 22;
                            continue;
                        }
                        _ => {
                            __current_state = 23;
                            continue;
                        }
                    }
                }
                3 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'a' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        's' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        't' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                4 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            return __current_match;
                        }
                        '\\' => {
                            __current_state = 25;
                            continue;
                        }
                        _ => {
                            __current_state = 26;
                            continue;
                        }
                    }
                }
                5 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                6 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                7 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                8 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                9 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                10 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '.' => {
                            __current_state = 27;
                            continue;
                        }
                        '/' => {
                            __current_state = 28;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                11 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                12 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        's' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        't' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                13 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                14 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                15 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                16 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                17 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 30;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                18 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                19 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                20 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                21 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                22 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 31;
                            continue;
                        }
                        '\\' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 32;
                            continue;
                        }
                        _ => {
                            __current_state = 23;
                            continue;
                        }
                    }
                }
                23 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 33;
                            continue;
                        }
                        '\\' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 32;
                            continue;
                        }
                        _ => {
                            __current_state = 23;
                            continue;
                        }
                    }
                }
                24 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        's' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        't' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                25 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 34;
                            continue;
                        }
                        '\\' => {
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            __current_state = 26;
                            continue;
                        }
                    }
                }
                26 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 36;
                            continue;
                        }
                        '\\' => {
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            __current_state = 26;
                            continue;
                        }
                    }
                }
                27 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                28 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                29 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((8, __index + 1));
                            __current_state = 39;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                30 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 40;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                31 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 33;
                            continue;
                        }
                        '\\' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 32;
                            continue;
                        }
                        _ => {
                            __current_state = 23;
                            continue;
                        }
                    }
                }
                32 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\"' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 31;
                            continue;
                        }
                        '\\' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 32;
                            continue;
                        }
                        _ => {
                            __current_state = 23;
                            continue;
                        }
                    }
                }
                33 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                34 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 36;
                            continue;
                        }
                        '\\' => {
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            __current_state = 26;
                            continue;
                        }
                    }
                }
                35 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\'' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 34;
                            continue;
                        }
                        '\\' => {
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            __current_state = 26;
                            continue;
                        }
                    }
                }
                36 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                37 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        'E' => {
                            __current_state = 41;
                            continue;
                        }
                        'e' => {
                            __current_state = 41;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                38 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                39 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                40 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 42;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                41 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '+' => {
                            __current_state = 43;
                            continue;
                        }
                        '-' => {
                            __current_state = 43;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                42 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 45;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                43 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                44 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                45 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 46;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                46 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((9, __index + 1));
                            __current_state = 47;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                47 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                _ => { panic!("invalid state {}", __current_state); }
            }
        }
    }

    impl<'input> __Matcher<'input> {
        pub fn new(s: &'input str) -> __Matcher<'input> {
            __Matcher { text: s, consumed: 0 }
        }
    }

    impl<'input> Iterator for __Matcher<'input> {
        type Item = Result<(usize, (usize, &'input str), usize), __ParseError<usize,(usize, &'input str),()>>;

        fn next(&mut self) -> Option<Self::Item> {
            let __text = self.text.trim_left();
            let __whitespace = self.text.len() - __text.len();
            let __start_offset = self.consumed + __whitespace;
            if __text.is_empty() {
                self.text = __text;
                self.consumed = __start_offset;
                None
            } else {
                match __tokenize(__text) {
                    Some((__index, __length)) => {
                        let __result = &__text[..__length];
                        let __remaining = &__text[__length..];
                        let __end_offset = __start_offset + __length;
                        self.text = __remaining;
                        self.consumed = __end_offset;
                        Some(Ok((__start_offset, (__index, __result), __end_offset)))
                    }
                    None => {
                        Some(Err(__ParseError::InvalidToken { location: __start_offset }))
                    }
                }
            }
        }
    }
}

pub fn __action0<
    'input,
>(
    input: &'input str,
    __0: Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    (__0)
}

pub fn __action1<
    'input,
>(
    input: &'input str,
    __0: CnfAnnotated,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> CnfAnnotated
{
    (__0)
}

pub fn __action2<
    'input,
>(
    input: &'input str,
    __0: Include,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    (__0)
}

pub fn __action3<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action4<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action5<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action6<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    (__0)
}

pub fn __action7<
    'input,
>(
    input: &'input str,
    f: AnnotatedFormula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> TptpInput
{
    TptpInput::AnnForm(f)
}

pub fn __action8<
    'input,
>(
    input: &'input str,
    i: Include,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> TptpInput
{
    TptpInput::Incl(i)
}

pub fn __action9<
    'input,
>(
    input: &'input str,
    c: CnfAnnotated,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> AnnotatedFormula
{
    AnnotatedFormula::Cnf(c)
}

pub fn __action10<
    'input,
>(
    input: &'input str,
    _: &'input str,
    _: &'input str,
    n: String,
    _: &'input str,
    fr: String,
    _: &'input str,
    f: Formula,
    _: &'input str,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> CnfAnnotated
{
    (n, fr, f)
}

pub fn __action11<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action12<
    'input,
>(
    input: &'input str,
    _: &'input str,
    d: Formula,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    d
}

pub fn __action13<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action14<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action15<
    'input,
>(
    input: &'input str,
    d: Formula,
    _: &'input str,
    l: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Or(Box::new(d), Box::new(l))
}

pub fn __action16<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action17<
    'input,
>(
    input: &'input str,
    _: &'input str,
    f: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Not(Box::new(f))
}

pub fn __action18<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action19<
    'input,
>(
    input: &'input str,
    t1: Term,
    _: String,
    t2: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Not(Box::new(Formula::Predicate("=".to_string(), vec!(t1, t2))))
}

pub fn __action20<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action21<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action22<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    { match t {
                             Term::Variable(s) => Formula::Predicate(s, Vec::new()),
                             Term::Function(s, args) => Formula::Predicate(s, args)
                         }
                       }
}

pub fn __action23<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action24<
    'input,
>(
    input: &'input str,
    __0: Formula,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    (__0)
}

pub fn __action25<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    { match t {
                             Term::Variable(s) => Formula::Predicate(s, Vec::new()),
                             Term::Function(s, args) => Formula::Predicate(s, args)
                         }
                       }
}

pub fn __action26<
    'input,
>(
    input: &'input str,
    t1: Term,
    s: String,
    t2: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Formula
{
    Formula::Predicate(s, vec!(t1, t2))
}

pub fn __action27<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action28<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action29<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action30<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action31<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Variable(s)
}

pub fn __action32<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action33<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action34<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action35<
    'input,
>(
    input: &'input str,
    s: String,
    _: &'input str,
    arg: Vec<Term>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, arg)
}

pub fn __action36<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action37<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action38<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action39<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action40<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action41<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action42<
    'input,
>(
    input: &'input str,
    __0: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    (__0)
}

pub fn __action43<
    'input,
>(
    input: &'input str,
    s: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, Vec::new())
}

pub fn __action44<
    'input,
>(
    input: &'input str,
    s: String,
    _: &'input str,
    arg: Vec<Term>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Function(s, arg)
}

pub fn __action45<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action46<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action47<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action48<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<Term>
{
    vec!(t)
}

pub fn __action49<
    'input,
>(
    input: &'input str,
    t: Term,
    _: &'input str,
    ts: Vec<Term>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<Term>
{
    { let mut ts = ts; ts.insert(0, t); ts }
}

pub fn __action50<
    'input,
>(
    input: &'input str,
    _: &'input str,
    _: &'input str,
    file_n: String,
    fs: ::std::option::Option<Vec<String>>,
    _: &'input str,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    (file_n, fs)
}

pub fn __action51<
    'input,
>(
    input: &'input str,
    _: &'input str,
    _: &'input str,
    nl: Vec<String>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    nl
}

pub fn __action52<
    'input,
>(
    input: &'input str,
    n: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    vec!(n)
}

pub fn __action53<
    'input,
>(
    input: &'input str,
    n: String,
    _: &'input str,
    ns: Vec<String>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<String>
{
    { let mut ns = ns; ns.insert(0, n); ns }
}

pub fn __action54<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action55<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action56<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action57<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action58<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action59<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action60<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action61<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action62<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    (__0)
}

pub fn __action63<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s[1..(s.len() - 1)].to_string()
}

pub fn __action64<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s[1..(s.len() - 1)].to_string()
}

pub fn __action65<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action66<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action67<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action68<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action69<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action70<
    'input,
>(
    input: &'input str,
    s: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    s.to_string()
}

pub fn __action71<
    'input,
>(
    input: &'input str,
    __0: Vec<String>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::option::Option<Vec<String>>
{
    Some(__0)
}

pub fn __action72<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::option::Option<Vec<String>>
{
    None
}

pub fn __action73<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    vec![]
}

pub fn __action74<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    v
}

pub fn __action75<
    'input,
>(
    input: &'input str,
    __0: TptpInput,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    vec![__0]
}

pub fn __action76<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<TptpInput>,
    e: TptpInput,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<TptpInput>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action77<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    let __temp0 = __action73(
        input,
        __lookbehind,
        __lookahead,
    );
    __action6(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action78<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<TptpInput>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Vec<TptpInput>
{
    let __temp0 = __action74(
        input,
        __0,
        __lookbehind,
        __lookahead,
    );
    __action6(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action79<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __2: String,
    __3: Vec<String>,
    __4: &'input str,
    __5: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    let __temp0 = __action71(
        input,
        __3,
        __lookbehind,
        __lookahead,
    );
    __action50(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action80<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: &'input str,
    __2: String,
    __3: &'input str,
    __4: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Include
{
    let __temp0 = __action72(
        input,
        __lookbehind,
        __lookahead,
    );
    __action50(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __lookbehind,
        __lookahead,
    )
}

pub trait __ToTriple<'input, > {
    type Error;
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),Self::Error>;
}

impl<'input, > __ToTriple<'input, > for (usize, (usize, &'input str), usize) {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, (usize, &'input str), usize),()> {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        value
    }
}
