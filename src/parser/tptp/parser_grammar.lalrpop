use parser::tptp::ast::*;

grammar;

pub TPTP_file: Vec<TptpInput> = {
    TPTP_input*
};

TPTP_input: TptpInput = {
    <f: annotated_formula> => TptpInput::AnnForm(f),
    <i: include> => TptpInput::Incl(i)
};

annotated_formula: AnnotatedFormula = {
    <c: cnf_annotated> => AnnotatedFormula::Cnf(c)
};

pub cnf_annotated: CnfAnnotated = {
    "cnf" "(" <n: name> "," <fr: formula_role> "," <f: cnf_formula> ")" "." => (n, fr, f)
};

formula_role: String = {
    lower_word
};

cnf_formula: Formula = {
    "(" <d: disjunction> ")" => d,
    disjunction,
};

disjunction: Formula = {
    literal,
    <d: disjunction> "|" <l: literal> => Formula::Or(Box::new(d), Box::new(l))
};

literal: Formula = {
    atomic_formula,
    "~" <f: atomic_formula> => Formula::Not(Box::new(f)),
    fol_infix_unary
};

fol_infix_unary: Formula = {
    <t1: term> infix_inequality <t2: term> => Formula::Not(Box::new(Formula::Predicate("=".to_string(), vec!(t1, t2))))
};

atomic_formula: Formula = {
    plain_atomic_formula,
    defined_atomic_formula
};

plain_atomic_formula: Formula = {
    <t: plain_term> => { match t {
                             Term::Variable(s) => Formula::Predicate(s, Vec::new()),
                             Term::Function(s, args) => Formula::Predicate(s, args)
                         }
                       }  
};

defined_atomic_formula: Formula = {
    defined_plain_formula,
    defined_infix_formula
};

defined_plain_formula: Formula = {
    <t: defined_term> => { match t {
                             Term::Variable(s) => Formula::Predicate(s, Vec::new()),
                             Term::Function(s, args) => Formula::Predicate(s, args)
                         }
                       }  
};

defined_infix_formula: Formula = {
    <t1: term> <s: defined_infix_pred> <t2: term> => Formula::Predicate(s, vec!(t1, t2))
};

defined_infix_pred: String = {
    infix_equality
};

infix_equality: String = {
    <s: "="> => s.to_string()
};

infix_inequality: String = {
    <s: "!="> => s.to_string()
};

term: Term = {
    function_term,
    <s: variable> => Term::Variable(s)
};

function_term: Term = {
    plain_term,
    defined_term
};

plain_term: Term = {
    <s: constant> => Term::Function(s, Vec::new()),
    <s: functor> "(" <arg: arguments> ")" => Term::Function(s, arg)
};

constant: String = {
    functor
};

functor: String = {
    atomic_word
};

defined_term: Term = {
    defined_atom,
    defined_atomic_term
};

defined_atom: Term = {
    <s: number> => Term::Function(s, Vec::new()),
    <s: distinct_object> => Term::Function(s, Vec::new())
};

defined_atomic_term: Term = {
    defined_plain_term
};

defined_plain_term: Term = {
    <s: defined_constant> => Term::Function(s, Vec::new()),
    <s: defined_functor> "(" <arg: arguments> ")" => Term::Function(s, arg)
};

defined_constant: String = {
    defined_functor
};

defined_functor: String = {
    atomic_defined_word
};

variable: String = {
    upper_word
};

arguments: Vec<Term> = {
    <t: term> => vec!(t),
    <t: term> "," <ts: arguments> => { let mut ts = ts; ts.insert(0, t); ts }
};

pub include: Include = {
    "include" "(" <file_n: file_name> <fs: formula_selection?> ")" "." => (file_n, fs)
};

formula_selection: Vec<String> = {
    "," "[" <nl: name_list> "]" => nl
};

name_list: Vec<String> = {
    <n: name> => vec!(n),
    <n: name> "," <ns: name_list> => { let mut ns = ns; ns.insert(0, n); ns }
};

name: String = {
    atomic_word,
    integer
};

atomic_word: String = {
    lower_word,
    single_quoted
};

atomic_defined_word: String = {
    dollar_word
};

number: String = {
    integer,
    rational,
    real
};

file_name: String = {
    single_quoted
};

// The "lexer".

pub single_quoted: String = {
    <s: r"[']([^']|[\\]['\\])+[']"> => s[1..(s.len() - 1)].to_string()
};

pub distinct_object: String = {
    <s: r#"[\"]([^"]|[\]["\])+[\"]"#> => s[1..(s.len() - 1)].to_string()
};

pub dollar_word: String = {
    <s: r"[$][a-z][a-zA-Z0-9_]*"> => s.to_string()
};

upper_word: String = {
    <s: r"[A-Z][a-zA-Z0-9_]*"> => s.to_string()
};

lower_word: String = {
    <s: r"[a-z][a-zA-Z0-9_]*"> => s.to_string()
};

real: String = {
    <s: r"[+-]?[0-9]+[.][0-9]+([eE][-+]?[0-9]+)?"> => s.to_string()
};

rational: String = {
    <s: r"[+-]?[0-9]+[/][0-9]+"> => s.to_string()
};

integer: String = {
    <s: r"[+-]?[0-9]+"> => s.to_string()
};


